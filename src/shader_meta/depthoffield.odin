package shader_meta;

import sg "sokol:sokol_gfx"
using import "../math"

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'dof_coc':
            Get shader desc: dof_coc_shader_desc()
            Vertex shader: coc_vs
                Attribute slots:
                    ATTR_coc_vs_pos = 0
                    ATTR_coc_vs_uv0 = 1
            Fragment shader: coc_fs
                Uniform block 'builtins':
                    C struct: builtins_t
                    Bind slot: SLOT_builtins = 0
                Uniform block 'dof_uniforms':
                    C struct: dof_uniforms_t
                    Bind slot: SLOT_dof_uniforms = 1
                Image 'cameraDepth':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_cameraDepth = 0


    Shader descriptor structs:

        sg_shader dof_coc = sg_make_shader(dof_coc_shader_desc());

    Vertex attribute locations for vertex shader 'coc_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_coc_vs_pos] = { ... },
                    [ATTR_coc_vs_uv0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_cameraDepth = 0;

    Bind slot and C-struct for uniform block 'builtins':

        builtins_t builtins = {
            .nearPlane = ...;
            .farPlane = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_builtins, &builtins, sizeof(builtins));

    Bind slot and C-struct for uniform block 'dof_uniforms':

        dof_uniforms_t dof_uniforms = {
            .focusDistance = ...;
            .focusRange = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_dof_uniforms, &dof_uniforms, sizeof(dof_uniforms));

*/
// #include <stdint.h>
// #include <stdbool.h>
//#if !defined(SOKOL_SHDC_ALIGN)
//  #if defined(_MSC_VER)
//    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
//  #else
//    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
//  #endif
//#endif
ATTR_coc_vs_pos :: 0;
ATTR_coc_vs_uv0 :: 1;

/* @(private) _get_attr_slot :: proc(attr_type: Attr_Type) -> int {
// TODO!
    return 0;
} */
SLOT_cameraDepth :: 0;
SLOT_builtins :: 0;
builtins :: struct #align 16 {
    nearPlane: f32,
    farPlane: f32,
};
SLOT_dof_uniforms :: 1;
dof_uniforms :: struct #align 16 {
    focusDistance: f32,
    focusRange: f32,
};
when SOKOL_D3D11 {
/*
    static float4 gl_Position;
    static int gl_InstanceID;
    static uint gl_Layer;
    static float2 pos;
    static float3 uvWithLayer;
    static float2 uv0;
    
    struct SPIRV_Cross_Input
    {
        float2 pos : TEXCOORD0;
        float2 uv0 : TEXCOORD1;
        uint gl_InstanceID : SV_InstanceID;
    };
    
    struct SPIRV_Cross_Output
    {
        float3 uvWithLayer : TEXCOORD0;
        float4 gl_Position : SV_Position;
        uint gl_Layer : SV_RenderTargetArrayIndex;
    };
    
    #line 13 ""
    void vert_main()
    {
    #line 13 ""
        gl_Layer = gl_InstanceID;
    #line 14 ""
        gl_Position = float4(pos, 0.0f, 1.0f);
    #line 15 ""
        uvWithLayer = float3(uv0, float(gl_InstanceID));
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        gl_InstanceID = int(stage_input.gl_InstanceID);
        pos = stage_input.pos;
        uv0 = stage_input.uv0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.gl_Layer = gl_Layer;
        stage_output.uvWithLayer = uvWithLayer;
        return stage_output;
    }
*/

_coc_vs_source_hlsl5_depthoffield := [?]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x49,0x44,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x57,0x69,
    0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x30,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,
    0x76,0x30,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x3a,0x20,0x53,0x56,0x5f,0x49,0x6e,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,
    0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x4c,0x61,
    0x79,0x65,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x52,0x65,0x6e,0x64,0x65,0x72,0x54,
    0x61,0x72,0x67,0x65,0x74,0x41,0x72,0x72,0x61,0x79,0x49,0x6e,0x64,0x65,0x78,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x22,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x30,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,
    0x49,0x44,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x49,0x44,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x49,0x44,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,
    0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,
    0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x20,0x3d,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer builtins : register(b0)
    {
        float _22_nearPlane : packoffset(c0);
        float _22_farPlane : packoffset(c0.y);
    };
    
    cbuffer dof_uniforms : register(b1)
    {
        float _72_focusDistance : packoffset(c0);
        float _72_focusRange : packoffset(c0.y);
    };
    
    Texture2DArray<float4> cameraDepth : register(t0);
    SamplerState _cameraDepth_sampler : register(s0);
    
    static float3 uvWithLayer;
    static float4 outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };
    
    #line 22 ""
    float LinearEyeDepth(float depth)
    {
    #line 22 ""
    #line 23 ""
        return ((2.0f * _22_nearPlane) * _22_farPlane) / ((_22_farPlane + _22_nearPlane) - (((2.0f * depth) - 1.0f) * (_22_farPlane - _22_nearPlane)));
    }
    
    #line 28 ""
    void frag_main()
    {
    #line 28 ""
        float param = cameraDepth.Sample(_cameraDepth_sampler, uvWithLayer).x;
        float _81 = clamp((LinearEyeDepth(param) - _72_focusDistance) / _72_focusRange, -1.0f, 1.0f);
        if (_81 < 0.0f)
        {
            outColor = float4(-1.0f, -0.0f, -0.0f, -1.0f) * _81;
        }
        else
        {
            outColor = float4(_81, _81, _81, 1.0f);
        }
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_coc_fs_source_hlsl5_depthoffield := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x62,0x75,0x69,0x6c,0x74,0x69,0x6e,0x73,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,
    0x6e,0x65,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,0x66,0x61,0x72,0x50,0x6c,0x61,
    0x6e,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,0x66,
    0x65,0x72,0x20,0x64,0x6f,0x66,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,
    0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x5f,0x66,
    0x6f,0x63,0x75,0x73,0x44,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x5f,0x66,0x6f,0x63,
    0x75,0x73,0x52,0x61,0x6e,0x67,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x44,0x65,0x70,
    0x74,0x68,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,
    0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,
    0x5f,0x63,0x61,0x6d,0x65,0x72,0x61,0x44,0x65,0x70,0x74,0x68,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,
    0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,
    0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,
    0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x4c,0x69,0x6e,0x65,0x61,0x72,0x45,0x79,0x65,0x44,0x65,0x70,0x74,0x68,0x28,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x29,0x0a,0x7b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x5f,0x32,0x32,0x5f,0x6e,
    0x65,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x5f,
    0x66,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2f,0x20,0x28,0x28,0x5f,0x32,
    0x32,0x5f,0x66,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x20,0x2b,0x20,0x5f,0x32,0x32,
    0x5f,0x6e,0x65,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2d,0x20,0x28,0x28,
    0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x64,0x65,0x70,0x74,0x68,0x29,0x20,0x2d,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,0x28,0x5f,0x32,0x32,0x5f,0x66,0x61,
    0x72,0x50,0x6c,0x61,0x6e,0x65,0x20,0x2d,0x20,0x5f,0x32,0x32,0x5f,0x6e,0x65,0x61,
    0x72,0x50,0x6c,0x61,0x6e,0x65,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x38,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x38,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x63,0x61,0x6d,0x65,0x72,
    0x61,0x44,0x65,0x70,0x74,0x68,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x63,
    0x61,0x6d,0x65,0x72,0x61,0x44,0x65,0x70,0x74,0x68,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x29,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,
    0x31,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x4c,0x69,0x6e,0x65,0x61,
    0x72,0x45,0x79,0x65,0x44,0x65,0x70,0x74,0x68,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,
    0x20,0x2d,0x20,0x5f,0x37,0x32,0x5f,0x66,0x6f,0x63,0x75,0x73,0x44,0x69,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x29,0x20,0x2f,0x20,0x5f,0x37,0x32,0x5f,0x66,0x6f,0x63,0x75,
    0x73,0x52,0x61,0x6e,0x67,0x65,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x38,
    0x31,0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,0x31,0x2e,0x30,0x66,0x2c,
    0x20,0x2d,0x30,0x2e,0x30,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x66,0x2c,0x20,0x2d,
    0x31,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,0x5f,0x38,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x38,0x31,0x2c,
    0x20,0x5f,0x38,0x31,0x2c,0x20,0x5f,0x38,0x31,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,
    0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,
    0x79,0x65,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
dof_coc_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_coc_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_coc_fs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        16, /* size */
        { /* uniforms */{"builtins",sg.Uniform_Type.FLOAT4,1},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        16, /* size */
        { /* uniforms */{"dof_uniforms",sg.Uniform_Type.FLOAT4,1},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"cameraDepth",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_coc_shader", /* label */
  0, /* _end_canary */
};
} // SOKOL_D3D11
// #if !defined(SOKOL_GFX_INCLUDED)
//  #error "Please include sokol_gfx.h before depthoffield.odin"
// #endif
dof_coc_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_coc_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}

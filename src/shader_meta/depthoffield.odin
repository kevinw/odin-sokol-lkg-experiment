package shader_meta;

import sg "../../lib/odin-sokol/src/sokol_gfx"
using import "../math"

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'dof_bokeh':
            Get shader desc: dof_bokeh_shader_desc()
            Vertex shader: dof_vs
                Attribute slots:
                    ATTR_dof_vs_pos = 0
                    ATTR_dof_vs_uv0 = 1
            Fragment shader: bokeh_fs
                Uniform block 'bokeh_uniforms':
                    C struct: bokeh_uniforms_t
                    Bind slot: SLOT_bokeh_uniforms = 0
                Image 'cameraColorWithCoc':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_cameraColorWithCoc = 0

        Shader program 'dof_coc':
            Get shader desc: dof_coc_shader_desc()
            Vertex shader: dof_vs
                Attribute slots:
                    ATTR_dof_vs_pos = 0
                    ATTR_dof_vs_uv0 = 1
            Fragment shader: coc_fs
                Uniform block 'builtins':
                    C struct: builtins_t
                    Bind slot: SLOT_builtins = 0
                Uniform block 'dof_uniforms':
                    C struct: dof_uniforms_t
                    Bind slot: SLOT_dof_uniforms = 1
                Image 'cameraDepth':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_cameraDepth = 0

        Shader program 'dof_combine':
            Get shader desc: dof_combine_shader_desc()
            Vertex shader: dof_vs
                Attribute slots:
                    ATTR_dof_vs_pos = 0
                    ATTR_dof_vs_uv0 = 1
            Fragment shader: dof_combine_fs
                Image 'mainCameraColor':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_mainCameraColor = 0
                Image 'cocTexArr':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_cocTexArr = 1
                Image 'dofTex':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_dofTex = 2

        Shader program 'dof_postfilter':
            Get shader desc: dof_postfilter_shader_desc()
            Vertex shader: dof_vs
                Attribute slots:
                    ATTR_dof_vs_pos = 0
                    ATTR_dof_vs_uv0 = 1
            Fragment shader: dof_postfilter_fs
                Image 'colorArray':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_colorArray = 0

        Shader program 'dof_prefilter':
            Get shader desc: dof_prefilter_shader_desc()
            Vertex shader: dof_vs
                Attribute slots:
                    ATTR_dof_vs_pos = 0
                    ATTR_dof_vs_uv0 = 1
            Fragment shader: dof_prefilter
                Image 'prefilterColor':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_prefilterColor = 0
                Image 'prefilterCoc':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_prefilterCoc = 1


    Shader descriptor structs:

        sg_shader dof_bokeh = sg_make_shader(dof_bokeh_shader_desc());
        sg_shader dof_coc = sg_make_shader(dof_coc_shader_desc());
        sg_shader dof_combine = sg_make_shader(dof_combine_shader_desc());
        sg_shader dof_postfilter = sg_make_shader(dof_postfilter_shader_desc());
        sg_shader dof_prefilter = sg_make_shader(dof_prefilter_shader_desc());

    Vertex attribute locations for vertex shader 'dof_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_dof_vs_pos] = { ... },
                    [ATTR_dof_vs_uv0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_cameraDepth = 0;
        SLOT_prefilterColor = 0;
        SLOT_prefilterCoc = 1;
        SLOT_cameraColorWithCoc = 0;
        SLOT_colorArray = 0;
        SLOT_mainCameraColor = 0;
        SLOT_cocTexArr = 1;
        SLOT_dofTex = 2;

    Bind slot and C-struct for uniform block 'builtins':

        builtins_t builtins = {
            .nearPlane = ...;
            .farPlane = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_builtins, &builtins, sizeof(builtins));

    Bind slot and C-struct for uniform block 'dof_uniforms':

        dof_uniforms_t dof_uniforms = {
            .focusDistance = ...;
            .focusRange = ...;
            .bokeh_radius = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_dof_uniforms, &dof_uniforms, sizeof(dof_uniforms));

    Bind slot and C-struct for uniform block 'bokeh_uniforms':

        bokeh_uniforms_t bokeh_uniforms = {
            .bokeh_radius = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_bokeh_uniforms, &bokeh_uniforms, sizeof(bokeh_uniforms));

*/
// #include <stdint.h>
// #include <stdbool.h>
//#if !defined(SOKOL_SHDC_ALIGN)
//  #if defined(_MSC_VER)
//    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
//  #else
//    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
//  #endif
//#endif
ATTR_dof_vs_pos :: 0;
ATTR_dof_vs_uv0 :: 1;

/* @(private) _get_attr_slot :: proc(attr_type: Attr_Type) -> int {
// TODO!
    return 0;
} */
SLOT_cameraDepth :: 0;
SLOT_prefilterColor :: 0;
SLOT_prefilterCoc :: 1;
SLOT_cameraColorWithCoc :: 0;
SLOT_colorArray :: 0;
SLOT_mainCameraColor :: 0;
SLOT_cocTexArr :: 1;
SLOT_dofTex :: 2;
SLOT_builtins :: 0;
builtins :: struct #align 16 {
    nearPlane: f32,
    farPlane: f32,
};
SLOT_dof_uniforms :: 1;
dof_uniforms :: struct #align 16 {
    focusDistance: f32,
    focusRange: f32,
    bokeh_radius: f32,
};
SLOT_bokeh_uniforms :: 0;
bokeh_uniforms :: struct #align 16 {
    bokeh_radius: f32,
};
when SOKOL_D3D11 {
/*
    static float4 gl_Position;
    static int gl_InstanceID;
    static uint gl_Layer;
    static float4 pos;
    static float3 uvWithLayer;
    static float2 uv0;
    
    struct SPIRV_Cross_Input
    {
        float4 pos : TEXCOORD0;
        float2 uv0 : TEXCOORD1;
        uint gl_InstanceID : SV_InstanceID;
    };
    
    struct SPIRV_Cross_Output
    {
        float3 uvWithLayer : TEXCOORD0;
        float4 gl_Position : SV_Position;
        uint gl_Layer : SV_RenderTargetArrayIndex;
    };
    
    #line 12 ""
    void vert_main()
    {
    #line 12 ""
        gl_Layer = gl_InstanceID;
    #line 13 ""
        gl_Position = pos;
    #line 14 ""
        uvWithLayer = float3(uv0, float(gl_InstanceID));
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        gl_InstanceID = int(stage_input.gl_InstanceID);
        pos = stage_input.pos;
        uv0 = stage_input.uv0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.gl_Layer = gl_Layer;
        stage_output.uvWithLayer = uvWithLayer;
        return stage_output;
    }
*/

_dof_vs_source_hlsl5_depthoffield := [?]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,
    0x65,0x49,0x44,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x57,0x69,
    0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x30,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,
    0x76,0x30,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x3a,0x20,0x53,0x56,0x5f,0x49,0x6e,0x73,0x74,
    0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,
    0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x4c,0x61,
    0x79,0x65,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x52,0x65,0x6e,0x64,0x65,0x72,0x54,
    0x61,0x72,0x67,0x65,0x74,0x41,0x72,0x72,0x61,0x79,0x49,0x6e,0x64,0x65,0x78,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x76,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x4c,0x61,
    0x79,0x65,0x72,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x75,
    0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer builtins : register(b0)
    {
        float _22_nearPlane : packoffset(c0);
        float _22_farPlane : packoffset(c0.y);
    };
    
    cbuffer dof_uniforms : register(b1)
    {
        float _72_focusDistance : packoffset(c0);
        float _72_focusRange : packoffset(c0.y);
        float _72_bokeh_radius : packoffset(c0.z);
    };
    
    Texture2DArray<float4> cameraDepth : register(t0);
    SamplerState _cameraDepth_sampler : register(s0);
    
    static float3 uvWithLayer;
    static float outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float outColor : SV_Target0;
    };
    
    #line 23 ""
    float LinearEyeDepth(float depth)
    {
    #line 23 ""
    #line 24 ""
        return ((2.0f * _22_nearPlane) * _22_farPlane) / ((_22_farPlane + _22_nearPlane) - (((2.0f * depth) - 1.0f) * (_22_farPlane - _22_nearPlane)));
    }
    
    #line 29 ""
    void frag_main()
    {
    #line 29 ""
        float param = cameraDepth.Sample(_cameraDepth_sampler, uvWithLayer).x;
        outColor = clamp((LinearEyeDepth(param) - _72_focusDistance) / _72_focusRange, -1.0f, 1.0f) * _72_bokeh_radius;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_coc_fs_source_hlsl5_depthoffield := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x62,0x75,0x69,0x6c,0x74,0x69,0x6e,0x73,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,
    0x6e,0x65,0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,0x66,0x61,0x72,0x50,0x6c,0x61,
    0x6e,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,0x66,
    0x65,0x72,0x20,0x64,0x6f,0x66,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,
    0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x5f,0x66,
    0x6f,0x63,0x75,0x73,0x44,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x5f,0x66,0x6f,0x63,
    0x75,0x73,0x52,0x61,0x6e,0x67,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x5f,0x62,0x6f,0x6b,0x65,0x68,0x5f,
    0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x3e,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x44,0x65,0x70,0x74,
    0x68,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,
    0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,
    0x63,0x61,0x6d,0x65,0x72,0x61,0x44,0x65,0x70,0x74,0x68,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,
    0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,
    0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x32,0x33,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x4c,0x69,
    0x6e,0x65,0x61,0x72,0x45,0x79,0x65,0x44,0x65,0x70,0x74,0x68,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x32,0x33,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,
    0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,
    0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x5f,0x32,0x32,0x5f,0x6e,0x65,0x61,0x72,
    0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x5f,0x66,0x61,0x72,
    0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2f,0x20,0x28,0x28,0x5f,0x32,0x32,0x5f,0x66,
    0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x20,0x2b,0x20,0x5f,0x32,0x32,0x5f,0x6e,0x65,
    0x61,0x72,0x50,0x6c,0x61,0x6e,0x65,0x29,0x20,0x2d,0x20,0x28,0x28,0x28,0x32,0x2e,
    0x30,0x66,0x20,0x2a,0x20,0x64,0x65,0x70,0x74,0x68,0x29,0x20,0x2d,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x20,0x2a,0x20,0x28,0x5f,0x32,0x32,0x5f,0x66,0x61,0x72,0x50,0x6c,
    0x61,0x6e,0x65,0x20,0x2d,0x20,0x5f,0x32,0x32,0x5f,0x6e,0x65,0x61,0x72,0x50,0x6c,
    0x61,0x6e,0x65,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x39,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x39,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x44,0x65,
    0x70,0x74,0x68,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x63,0x61,0x6d,0x65,
    0x72,0x61,0x44,0x65,0x70,0x74,0x68,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x29,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x4c,0x69,0x6e,0x65,0x61,0x72,0x45,0x79,0x65,
    0x44,0x65,0x70,0x74,0x68,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2d,0x20,0x5f,
    0x37,0x32,0x5f,0x66,0x6f,0x63,0x75,0x73,0x44,0x69,0x73,0x74,0x61,0x6e,0x63,0x65,
    0x29,0x20,0x2f,0x20,0x5f,0x37,0x32,0x5f,0x66,0x6f,0x63,0x75,0x73,0x52,0x61,0x6e,
    0x67,0x65,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,
    0x20,0x2a,0x20,0x5f,0x37,0x32,0x5f,0x62,0x6f,0x6b,0x65,0x68,0x5f,0x72,0x61,0x64,
    0x69,0x75,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,
    0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,
    0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x00,
};
/*
    Texture2DArray<float4> prefilterColor : register(t0);
    SamplerState _prefilterColor_sampler : register(s0);
    Texture2DArray<float4> prefilterCoc : register(t1);
    SamplerState _prefilterCoc_sampler : register(s1);
    
    static float3 uvWithLayer;
    static float4 outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };
    
    float2 _270;
    
    uint3 SPIRV_Cross_textureSize(Texture2DArray<float4> Tex, uint Level, out uint Param)
    {
        uint3 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, ret.z, Param);
        return ret;
    }
    
    #line 13 ""
    float Weigh(float3 c)
    {
    #line 13 ""
        return 1.0f / (1.0f + max(max(c.x, c.y), c.z));
    }
    
    #line 17 ""
    void frag_main()
    {
    #line 17 ""
        uint _44_dummy_parameter;
        float2 _47 = float2(int3(SPIRV_Cross_textureSize(prefilterColor, uint(0), _44_dummy_parameter)).xy);
        float2 _264 = _270;
        _264.x = 1.0f / _47.x;
        float2 _267 = _264;
        _267.y = 1.0f / _47.y;
        float4 _64 = _267.xyxy * float4(-0.5f, -0.5f, 0.5f, 0.5f);
        float3 _79 = float3(uvWithLayer.xy + _64.xy, uvWithLayer.z);
        float3 _93 = float3(uvWithLayer.xy + _64.zy, uvWithLayer.z);
        float3 _107 = float3(uvWithLayer.xy + _64.xw, uvWithLayer.z);
        float3 _121 = float3(uvWithLayer.xy + _64.zw, uvWithLayer.z);
        float3 param = prefilterColor.Sample(_prefilterColor_sampler, _79).xyz;
        float3 param_1 = prefilterColor.Sample(_prefilterColor_sampler, _93).xyz;
        float3 param_2 = prefilterColor.Sample(_prefilterColor_sampler, _107).xyz;
        float3 param_3 = prefilterColor.Sample(_prefilterColor_sampler, _121).xyz;
    #line 36 ""
        float4 _182 = prefilterCoc.Sample(_prefilterCoc_sampler, _79);
        float _183 = _182.x;
        float4 _196 = prefilterCoc.Sample(_prefilterCoc_sampler, _93);
        float _197 = _196.x;
        float4 _210 = prefilterCoc.Sample(_prefilterCoc_sampler, _107);
        float _211 = _210.x;
        float4 _224 = prefilterCoc.Sample(_prefilterCoc_sampler, _121);
        float _225 = _224.x;
        float _233 = min(min(min(_183, _197), _211), _225);
        float _241 = max(max(max(_183, _197), _211), _225);
        outColor = float4(prefilterColor.Sample(_prefilterColor_sampler, uvWithLayer).xyz, (_241 >= (-_233)) ? _241 : _233);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_dof_prefilter_source_hlsl5_depthoffield := [?]u8 {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,
    0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,
    0x74,0x65,0x20,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,
    0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x20,0x3a,
    0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x29,0x3b,0x0a,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x70,0x72,0x65,
    0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x31,0x29,
    0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x57,
    0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x32,0x37,0x30,0x3b,0x0a,0x0a,0x75,0x69,0x6e,0x74,0x33,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x54,
    0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,
    0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x72,0x65,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x2e,0x47,0x65,0x74,0x44,0x69,0x6d,0x65,
    0x6e,0x73,0x69,0x6f,0x6e,0x73,0x28,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,0x72,0x65,
    0x74,0x2e,0x78,0x2c,0x20,0x72,0x65,0x74,0x2e,0x79,0x2c,0x20,0x72,0x65,0x74,0x2e,
    0x7a,0x2c,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x57,0x65,0x69,0x67,0x68,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x29,0x0a,
    0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x31,0x2e,0x30,0x66,0x20,0x2f,0x20,
    0x28,0x31,0x2e,0x30,0x66,0x20,0x2b,0x20,0x6d,0x61,0x78,0x28,0x6d,0x61,0x78,0x28,
    0x63,0x2e,0x78,0x2c,0x20,0x63,0x2e,0x79,0x29,0x2c,0x20,0x63,0x2e,0x7a,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x22,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x34,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x74,0x33,0x28,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,
    0x7a,0x65,0x28,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,
    0x72,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x30,0x29,0x2c,0x20,0x5f,0x34,0x34,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x29,
    0x29,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x5f,0x32,0x36,0x34,0x20,0x3d,0x20,0x5f,0x32,0x37,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x5f,0x32,0x36,0x34,0x2e,0x78,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,
    0x20,0x2f,0x20,0x5f,0x34,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x36,0x37,0x20,0x3d,0x20,0x5f,0x32,0x36,0x34,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x36,0x37,0x2e,0x79,0x20,0x3d,0x20,0x31,
    0x2e,0x30,0x66,0x20,0x2f,0x20,0x5f,0x34,0x37,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x36,0x34,0x20,0x3d,0x20,0x5f,0x32,
    0x36,0x37,0x2e,0x78,0x79,0x78,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x2d,0x30,0x2e,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x35,0x66,0x2c,0x20,0x30,
    0x2e,0x35,0x66,0x2c,0x20,0x30,0x2e,0x35,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x37,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,
    0x78,0x79,0x20,0x2b,0x20,0x5f,0x36,0x34,0x2e,0x78,0x79,0x2c,0x20,0x75,0x76,0x57,
    0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x39,0x33,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x2e,0x78,0x79,0x20,0x2b,0x20,0x5f,0x36,0x34,0x2e,0x7a,0x79,0x2c,0x20,0x75,0x76,
    0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,
    0x65,0x72,0x2e,0x78,0x79,0x20,0x2b,0x20,0x5f,0x36,0x34,0x2e,0x78,0x77,0x2c,0x20,
    0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x31,0x32,0x31,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,
    0x61,0x79,0x65,0x72,0x2e,0x78,0x79,0x20,0x2b,0x20,0x5f,0x36,0x34,0x2e,0x7a,0x77,
    0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x20,0x3d,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,
    0x6c,0x6f,0x72,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,
    0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x5f,0x37,0x39,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,
    0x72,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,
    0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x5f,0x39,0x33,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,
    0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,0x72,0x2e,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,
    0x72,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x5f,0x31,0x30,0x37,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,
    0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,0x72,0x2e,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,
    0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x5f,
    0x31,0x32,0x31,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x33,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x5f,0x31,0x38,0x32,0x20,0x3d,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,
    0x72,0x43,0x6f,0x63,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,
    0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x2c,0x20,0x5f,0x37,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x38,0x33,0x20,0x3d,0x20,0x5f,0x31,0x38,0x32,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x39,
    0x36,0x20,0x3d,0x20,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,
    0x65,0x72,0x43,0x6f,0x63,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x5f,
    0x39,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x39,0x37,0x20,0x3d,0x20,0x5f,0x31,0x39,0x36,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x30,0x20,0x3d,0x20,
    0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,
    0x63,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x5f,0x31,0x30,0x37,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x31,
    0x20,0x3d,0x20,0x5f,0x32,0x31,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x32,0x34,0x20,0x3d,0x20,0x70,0x72,0x65,
    0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x63,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x35,0x20,0x3d,0x20,
    0x5f,0x32,0x32,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x33,0x33,0x20,0x3d,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x69,0x6e,
    0x28,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x38,0x33,0x2c,0x20,0x5f,0x31,0x39,0x37,0x29,
    0x2c,0x20,0x5f,0x32,0x31,0x31,0x29,0x2c,0x20,0x5f,0x32,0x32,0x35,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x34,0x31,0x20,0x3d,
    0x20,0x6d,0x61,0x78,0x28,0x6d,0x61,0x78,0x28,0x6d,0x61,0x78,0x28,0x5f,0x31,0x38,
    0x33,0x2c,0x20,0x5f,0x31,0x39,0x37,0x29,0x2c,0x20,0x5f,0x32,0x31,0x31,0x29,0x2c,
    0x20,0x5f,0x32,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x70,0x72,
    0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,0x6c,0x6f,0x72,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x5f,0x70,0x72,0x65,0x66,0x69,0x6c,0x74,0x65,0x72,0x43,0x6f,
    0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x57,
    0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x28,
    0x5f,0x32,0x34,0x31,0x20,0x3e,0x3d,0x20,0x28,0x2d,0x5f,0x32,0x33,0x33,0x29,0x29,
    0x20,0x3f,0x20,0x5f,0x32,0x34,0x31,0x20,0x3a,0x20,0x5f,0x32,0x33,0x33,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x57,0x69,0x74,
    0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x6f,
    0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,

};
/*
    static const float2 _134[22] = { 0.0f.xx, float2(0.533333361148834228515625f, 0.0f), float2(0.3325279057025909423828125f, 0.41697680950164794921875f), float2(-0.118677847087383270263671875f, 0.5199615955352783203125f), float2(-0.480516731739044189453125f, 0.23140470683574676513671875f), float2(-0.480516731739044189453125f, -0.23140467703342437744140625f), float2(-0.11867763102054595947265625f, -0.519961655139923095703125f), float2(0.3325278460979461669921875f, -0.4169768989086151123046875f), float2(1.0f, 0.0f), float2(0.900968849658966064453125f, 0.4338837563991546630859375f), float2(0.623489797115325927734375f, 0.7818315029144287109375f), float2(0.2225209772586822509765625f, 0.9749279022216796875f), float2(-0.22252094745635986328125f, 0.9749279022216796875f), float2(-0.62348997592926025390625f, 0.78183138370513916015625f), float2(-0.900968849658966064453125f, 0.4338838160037994384765625f), float2(-1.0f, 0.0f), float2(-0.900968849658966064453125f, -0.4338837563991546630859375f), float2(-0.6234896183013916015625f, -0.78183162212371826171875f), float2(-0.22252054512500762939453125f, -0.97492802143096923828125f), float2(0.22252149879932403564453125f, -0.97492778301239013671875f), float2(0.623489677906036376953125f, -0.78183162212371826171875f), float2(0.900968849658966064453125f, -0.4338837563991546630859375f) };
    
    cbuffer bokeh_uniforms : register(b0)
    {
        float _142_bokeh_radius : packoffset(c0);
    };
    
    Texture2DArray<float4> cameraColorWithCoc : register(t0);
    SamplerState _cameraColorWithCoc_sampler : register(s0);
    
    static float3 uvWithLayer;
    static float4 outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };
    
    float2 _210;
    
    uint3 SPIRV_Cross_textureSize(Texture2DArray<float4> Tex, uint Level, out uint Param)
    {
        uint3 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, ret.z, Param);
        return ret;
    }
    
    #line 65 ""
    float saturate(float s)
    {
    #line 65 ""
        return clamp(s, 0.0f, 1.0f);
    }
    
    #line 68 ""
    float Weigh(float coc, float radius)
    {
    #line 68 ""
        float param = ((coc - radius) + 2.0f) * 0.5f;
        return saturate(param);
    }
    
    #line 76 ""
    void frag_main()
    {
    #line 76 ""
        uint _50_dummy_parameter;
        float2 _53 = float2(int3(SPIRV_Cross_textureSize(cameraColorWithCoc, uint(0), _50_dummy_parameter)).xy);
        float2 _200 = _210;
        _200.x = 1.0f / _53.x;
        float2 _203 = _200;
        _203.y = 1.0f / _53.y;
        float _208;
        float3 _209;
        _209 = 0.0f.xxx;
        _208 = 0.0f;
        float param;
        float param_1;
        for (int _207 = 0; _207 < 22; )
        {
            float2 _146 = _134[_207] * _142_bokeh_radius;
            float4 _165 = cameraColorWithCoc.Sample(_cameraColorWithCoc_sampler, uvWithLayer + float3(_146 * _203, 0.0f));
            param = abs(_165.w);
            param_1 = length(_146);
            float _174 = Weigh(param, param_1);
            _209 += (_165.xyz * _174);
            _208 += _174;
            _207++;
            continue;
        }
        outColor = float4(_209 * (1.0f / _208), 1.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_bokeh_fs_source_hlsl5_depthoffield := [?]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x31,0x33,0x34,0x5b,0x32,0x32,0x5d,0x20,0x3d,0x20,0x7b,
    0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x30,0x2e,0x35,0x33,0x33,0x33,0x33,0x33,0x33,0x36,0x31,0x31,0x34,0x38,0x38,
    0x33,0x34,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,
    0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,0x2e,0x33,0x33,
    0x32,0x35,0x32,0x37,0x39,0x30,0x35,0x37,0x30,0x32,0x35,0x39,0x30,0x39,0x34,0x32,
    0x33,0x38,0x32,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x34,0x31,0x36,0x39,
    0x37,0x36,0x38,0x30,0x39,0x35,0x30,0x31,0x36,0x34,0x37,0x39,0x34,0x39,0x32,0x31,
    0x38,0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,
    0x2e,0x31,0x31,0x38,0x36,0x37,0x37,0x38,0x34,0x37,0x30,0x38,0x37,0x33,0x38,0x33,
    0x32,0x37,0x30,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x37,0x35,0x66,0x2c,0x20,0x30,
    0x2e,0x35,0x31,0x39,0x39,0x36,0x31,0x35,0x39,0x35,0x35,0x33,0x35,0x32,0x37,0x38,
    0x33,0x32,0x30,0x33,0x31,0x32,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x28,0x2d,0x30,0x2e,0x34,0x38,0x30,0x35,0x31,0x36,0x37,0x33,0x31,0x37,0x33,
    0x39,0x30,0x34,0x34,0x31,0x38,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,
    0x30,0x2e,0x32,0x33,0x31,0x34,0x30,0x34,0x37,0x30,0x36,0x38,0x33,0x35,0x37,0x34,
    0x36,0x37,0x36,0x35,0x31,0x33,0x36,0x37,0x31,0x38,0x37,0x35,0x66,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x34,0x38,0x30,0x35,0x31,0x36,
    0x37,0x33,0x31,0x37,0x33,0x39,0x30,0x34,0x34,0x31,0x38,0x39,0x34,0x35,0x33,0x31,
    0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x32,0x33,0x31,0x34,0x30,0x34,0x36,0x37,
    0x37,0x30,0x33,0x33,0x34,0x32,0x34,0x33,0x37,0x37,0x34,0x34,0x31,0x34,0x30,0x36,
    0x32,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,
    0x31,0x31,0x38,0x36,0x37,0x37,0x36,0x33,0x31,0x30,0x32,0x30,0x35,0x34,0x35,0x39,
    0x35,0x39,0x34,0x37,0x32,0x36,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,
    0x35,0x31,0x39,0x39,0x36,0x31,0x36,0x35,0x35,0x31,0x33,0x39,0x39,0x32,0x33,0x30,
    0x39,0x35,0x37,0x30,0x33,0x31,0x32,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x33,0x33,0x32,0x35,0x32,0x37,0x38,0x34,0x36,0x30,0x39,
    0x37,0x39,0x34,0x36,0x31,0x36,0x36,0x39,0x39,0x32,0x31,0x38,0x37,0x35,0x66,0x2c,
    0x20,0x2d,0x30,0x2e,0x34,0x31,0x36,0x39,0x37,0x36,0x38,0x39,0x38,0x39,0x30,0x38,
    0x36,0x31,0x35,0x31,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x66,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,
    0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,0x2e,0x39,0x30,
    0x30,0x39,0x36,0x38,0x38,0x34,0x39,0x36,0x35,0x38,0x39,0x36,0x36,0x30,0x36,0x34,
    0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x34,0x33,0x33,0x38,0x38,
    0x33,0x37,0x35,0x36,0x33,0x39,0x39,0x31,0x35,0x34,0x36,0x36,0x33,0x30,0x38,0x35,
    0x39,0x33,0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,
    0x2e,0x36,0x32,0x33,0x34,0x38,0x39,0x37,0x39,0x37,0x31,0x31,0x35,0x33,0x32,0x35,
    0x39,0x32,0x37,0x37,0x33,0x34,0x33,0x37,0x35,0x66,0x2c,0x20,0x30,0x2e,0x37,0x38,
    0x31,0x38,0x33,0x31,0x35,0x30,0x32,0x39,0x31,0x34,0x34,0x32,0x38,0x37,0x31,0x30,
    0x39,0x33,0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,
    0x2e,0x32,0x32,0x32,0x35,0x32,0x30,0x39,0x37,0x37,0x32,0x35,0x38,0x36,0x38,0x32,
    0x32,0x35,0x30,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x39,
    0x37,0x34,0x39,0x32,0x37,0x39,0x30,0x32,0x32,0x32,0x31,0x36,0x37,0x39,0x36,0x38,
    0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,
    0x32,0x32,0x32,0x35,0x32,0x30,0x39,0x34,0x37,0x34,0x35,0x36,0x33,0x35,0x39,0x38,
    0x36,0x33,0x32,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x39,0x37,0x34,0x39,
    0x32,0x37,0x39,0x30,0x32,0x32,0x32,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x66,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x36,0x32,0x33,
    0x34,0x38,0x39,0x39,0x37,0x35,0x39,0x32,0x39,0x32,0x36,0x30,0x32,0x35,0x33,0x39,
    0x30,0x36,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x37,0x38,0x31,0x38,0x33,0x31,0x33,
    0x38,0x33,0x37,0x30,0x35,0x31,0x33,0x39,0x31,0x36,0x30,0x31,0x35,0x36,0x32,0x35,
    0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x39,0x30,
    0x30,0x39,0x36,0x38,0x38,0x34,0x39,0x36,0x35,0x38,0x39,0x36,0x36,0x30,0x36,0x34,
    0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x30,0x2e,0x34,0x33,0x33,0x38,0x38,
    0x33,0x38,0x31,0x36,0x30,0x30,0x33,0x37,0x39,0x39,0x34,0x33,0x38,0x34,0x37,0x36,
    0x35,0x36,0x32,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,
    0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x39,0x30,0x30,0x39,0x36,0x38,0x38,0x34,0x39,
    0x36,0x35,0x38,0x39,0x36,0x36,0x30,0x36,0x34,0x34,0x35,0x33,0x31,0x32,0x35,0x66,
    0x2c,0x20,0x2d,0x30,0x2e,0x34,0x33,0x33,0x38,0x38,0x33,0x37,0x35,0x36,0x33,0x39,
    0x39,0x31,0x35,0x34,0x36,0x36,0x33,0x30,0x38,0x35,0x39,0x33,0x37,0x35,0x66,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x36,0x32,0x33,0x34,
    0x38,0x39,0x36,0x31,0x38,0x33,0x30,0x31,0x33,0x39,0x31,0x36,0x30,0x31,0x35,0x36,
    0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x37,0x38,0x31,0x38,0x33,0x31,0x36,0x32,
    0x32,0x31,0x32,0x33,0x37,0x31,0x38,0x32,0x36,0x31,0x37,0x31,0x38,0x37,0x35,0x66,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x2d,0x30,0x2e,0x32,0x32,0x32,
    0x35,0x32,0x30,0x35,0x34,0x35,0x31,0x32,0x35,0x30,0x30,0x37,0x36,0x32,0x39,0x33,
    0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,0x2e,0x39,0x37,0x34,
    0x39,0x32,0x38,0x30,0x32,0x31,0x34,0x33,0x30,0x39,0x36,0x39,0x32,0x33,0x38,0x32,
    0x38,0x31,0x32,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x30,
    0x2e,0x32,0x32,0x32,0x35,0x32,0x31,0x34,0x39,0x38,0x37,0x39,0x39,0x33,0x32,0x34,
    0x30,0x33,0x35,0x36,0x34,0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,0x2d,0x30,
    0x2e,0x39,0x37,0x34,0x39,0x32,0x37,0x37,0x38,0x33,0x30,0x31,0x32,0x33,0x39,0x30,
    0x31,0x33,0x36,0x37,0x31,0x38,0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x36,0x32,0x33,0x34,0x38,0x39,0x36,0x37,0x37,0x39,0x30,
    0x36,0x30,0x33,0x36,0x33,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x66,0x2c,0x20,
    0x2d,0x30,0x2e,0x37,0x38,0x31,0x38,0x33,0x31,0x36,0x32,0x32,0x31,0x32,0x33,0x37,
    0x31,0x38,0x32,0x36,0x31,0x37,0x31,0x38,0x37,0x35,0x66,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x30,0x2e,0x39,0x30,0x30,0x39,0x36,0x38,0x38,0x34,0x39,
    0x36,0x35,0x38,0x39,0x36,0x36,0x30,0x36,0x34,0x34,0x35,0x33,0x31,0x32,0x35,0x66,
    0x2c,0x20,0x2d,0x30,0x2e,0x34,0x33,0x33,0x38,0x38,0x33,0x37,0x35,0x36,0x33,0x39,
    0x39,0x31,0x35,0x34,0x36,0x36,0x33,0x30,0x38,0x35,0x39,0x33,0x37,0x35,0x66,0x29,
    0x20,0x7d,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x62,0x6f,0x6b,
    0x65,0x68,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,
    0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x32,0x5f,0x62,0x6f,0x6b,0x65,
    0x68,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x3e,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x57,0x69,0x74,0x68,0x43,0x6f,0x63,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x63,0x61,0x6d,0x65,0x72,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x57,0x69,0x74,0x68,0x43,0x6f,0x63,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,
    0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x57,
    0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x32,0x31,0x30,0x3b,0x0a,0x0a,0x75,0x69,0x6e,0x74,0x33,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x54,
    0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,
    0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x72,0x65,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x2e,0x47,0x65,0x74,0x44,0x69,0x6d,0x65,
    0x6e,0x73,0x69,0x6f,0x6e,0x73,0x28,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,0x72,0x65,
    0x74,0x2e,0x78,0x2c,0x20,0x72,0x65,0x74,0x2e,0x79,0x2c,0x20,0x72,0x65,0x74,0x2e,
    0x7a,0x2c,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x36,0x35,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x61,0x74,0x75,0x72,0x61,0x74,0x65,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x35,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x73,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x38,0x20,0x22,0x22,0x0a,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x57,0x65,0x69,0x67,0x68,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x63,0x6f,0x63,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x64,
    0x69,0x75,0x73,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x38,0x20,
    0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x20,0x3d,0x20,0x28,0x28,0x63,0x6f,0x63,0x20,0x2d,0x20,0x72,0x61,0x64,
    0x69,0x75,0x73,0x29,0x20,0x2b,0x20,0x32,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,0x30,
    0x2e,0x35,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x73,0x61,0x74,0x75,0x72,0x61,0x74,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x36,0x20,0x22,0x22,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x36,0x20,0x22,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x30,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x74,0x33,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,
    0x65,0x28,0x63,0x61,0x6d,0x65,0x72,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x57,0x69,0x74,
    0x68,0x43,0x6f,0x63,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x30,0x29,0x2c,0x20,0x5f,
    0x35,0x30,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,
    0x65,0x72,0x29,0x29,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x30,0x30,0x20,0x3d,0x20,0x5f,0x32,0x31,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x30,0x2e,0x78,0x20,0x3d,0x20,0x31,
    0x2e,0x30,0x66,0x20,0x2f,0x20,0x5f,0x35,0x33,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x30,0x33,0x20,0x3d,0x20,0x5f,
    0x32,0x30,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x33,0x2e,0x79,0x20,
    0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2f,0x20,0x5f,0x35,0x33,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x30,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x30,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x39,0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,
    0x2e,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x38,0x20,0x3d,
    0x20,0x30,0x2e,0x30,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x5f,0x32,0x30,0x37,0x20,0x3d,0x20,0x30,
    0x3b,0x20,0x5f,0x32,0x30,0x37,0x20,0x3c,0x20,0x32,0x32,0x3b,0x20,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x31,0x34,0x36,0x20,0x3d,0x20,0x5f,0x31,0x33,0x34,0x5b,
    0x5f,0x32,0x30,0x37,0x5d,0x20,0x2a,0x20,0x5f,0x31,0x34,0x32,0x5f,0x62,0x6f,0x6b,
    0x65,0x68,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x36,0x35,0x20,0x3d,
    0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x57,0x69,0x74,0x68,
    0x43,0x6f,0x63,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x63,0x61,0x6d,0x65,
    0x72,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x57,0x69,0x74,0x68,0x43,0x6f,0x63,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,
    0x79,0x65,0x72,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x31,0x34,
    0x36,0x20,0x2a,0x20,0x5f,0x32,0x30,0x33,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x61,0x62,0x73,0x28,0x5f,0x31,0x36,0x35,0x2e,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x34,0x36,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x37,
    0x34,0x20,0x3d,0x20,0x57,0x65,0x69,0x67,0x68,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x32,0x30,0x39,0x20,0x2b,0x3d,0x20,0x28,0x5f,0x31,0x36,0x35,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x31,0x37,0x34,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x38,0x20,0x2b,0x3d,0x20,0x5f,0x31,
    0x37,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x30,0x37,
    0x2b,0x2b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,
    0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x5f,0x32,0x30,0x39,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x66,0x20,0x2f,
    0x20,0x5f,0x32,0x30,0x38,0x29,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,
    0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    Texture2DArray<float4> colorArray : register(t0);
    SamplerState _colorArray_sampler : register(s0);
    
    static float3 uvWithLayer;
    static float4 outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };
    
    float2 _115;
    
    uint3 SPIRV_Cross_textureSize(Texture2DArray<float4> Tex, uint Level, out uint Param)
    {
        uint3 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, ret.z, Param);
        return ret;
    }
    
    #line 11 ""
    void frag_main()
    {
    #line 11 ""
        uint _20_dummy_parameter;
        float2 _23 = float2(int3(SPIRV_Cross_textureSize(colorArray, uint(0), _20_dummy_parameter)).xy);
        float2 _110 = _115;
        _110.x = 1.0f / _23.x;
        float2 _113 = _110;
        _113.y = 1.0f / _23.y;
        float4 _45 = _113.xyxy * float4(-0.5f, -0.5f, 0.5f, 0.5f);
        outColor = (((colorArray.Sample(_colorArray_sampler, float3(uvWithLayer.xy + _45.xy, uvWithLayer.z)) + colorArray.Sample(_colorArray_sampler, float3(uvWithLayer.xy + _45.zy, uvWithLayer.z))) + colorArray.Sample(_colorArray_sampler, float3(uvWithLayer.xy + _45.xw, uvWithLayer.z))) + colorArray.Sample(_colorArray_sampler, float3(uvWithLayer.xy + _45.zw, uvWithLayer.z))) * 0.25f;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_dof_postfilter_fs_source_hlsl5_depthoffield := [?]u8 {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,
    0x79,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,
    0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,
    0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,
    0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,
    0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x5f,0x31,0x31,0x35,0x3b,0x0a,0x0a,0x75,0x69,0x6e,0x74,0x33,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,
    0x54,0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x4c,0x65,0x76,0x65,0x6c,0x2c,
    0x20,0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x72,0x65,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x2e,0x47,0x65,0x74,0x44,0x69,0x6d,
    0x65,0x6e,0x73,0x69,0x6f,0x6e,0x73,0x28,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,0x72,
    0x65,0x74,0x2e,0x78,0x2c,0x20,0x72,0x65,0x74,0x2e,0x79,0x2c,0x20,0x72,0x65,0x74,
    0x2e,0x7a,0x2c,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,
    0x6e,0x74,0x20,0x5f,0x32,0x30,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x65,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x32,0x33,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x69,0x6e,0x74,0x33,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x30,0x29,
    0x2c,0x20,0x5f,0x32,0x30,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x65,0x74,0x65,0x72,0x29,0x29,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x31,0x30,0x20,0x3d,0x20,0x5f,
    0x31,0x31,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x30,0x2e,0x78,0x20,
    0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x31,0x33,0x20,
    0x3d,0x20,0x5f,0x31,0x31,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x33,
    0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x34,
    0x35,0x20,0x3d,0x20,0x5f,0x31,0x31,0x33,0x2e,0x78,0x79,0x78,0x79,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x2d,0x30,0x2e,0x35,0x66,0x2c,0x20,0x2d,0x30,
    0x2e,0x35,0x66,0x2c,0x20,0x30,0x2e,0x35,0x66,0x2c,0x20,0x30,0x2e,0x35,0x66,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x28,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x2e,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,
    0x79,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x78,0x79,
    0x20,0x2b,0x20,0x5f,0x34,0x35,0x2e,0x78,0x79,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,
    0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,0x29,0x20,0x2b,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,
    0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x78,0x79,0x20,0x2b,0x20,0x5f,0x34,0x35,0x2e,
    0x7a,0x79,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,
    0x7a,0x29,0x29,0x29,0x20,0x2b,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,
    0x79,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x41,
    0x72,0x72,0x61,0x79,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x2e,0x78,0x79,0x20,0x2b,0x20,0x5f,0x34,0x35,0x2e,0x78,0x77,0x2c,0x20,0x75,0x76,
    0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2b,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x2e,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x41,0x72,0x72,0x61,0x79,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,
    0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x2e,0x78,0x79,0x20,0x2b,0x20,
    0x5f,0x34,0x35,0x2e,0x7a,0x77,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,
    0x79,0x65,0x72,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x35,0x66,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x57,0x69,
    0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,
    0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,0x74,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x00,
};
/*
    Texture2DArray<float4> mainCameraColor : register(t0);
    SamplerState _mainCameraColor_sampler : register(s0);
    Texture2DArray<float4> cocTexArr : register(t1);
    SamplerState _cocTexArr_sampler : register(s1);
    Texture2DArray<float4> dofTex : register(t2);
    SamplerState _dofTex_sampler : register(s2);
    
    static float3 uvWithLayer;
    static float4 outColor;
    
    struct SPIRV_Cross_Input
    {
        float3 uvWithLayer : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };
    
    #line 12 ""
    void frag_main()
    {
    #line 12 ""
        float4 _20 = mainCameraColor.Sample(_mainCameraColor_sampler, uvWithLayer);
    #line 14 ""
    #line 15 ""
        outColor = float4(lerp(_20.xyz, dofTex.Sample(_dofTex_sampler, uvWithLayer).xyz, smoothstep(0.100000001490116119384765625f, 1.0f, abs(cocTexArr.Sample(_cocTexArr_sampler, uvWithLayer).x)).xxx), _20.w);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uvWithLayer = stage_input.uvWithLayer;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/

_dof_combine_fs_source_hlsl5_depthoffield := [?]u8 {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x43,0x61,0x6d,0x65,0x72,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,
    0x61,0x74,0x65,0x20,0x5f,0x6d,0x61,0x69,0x6e,0x43,0x61,0x6d,0x65,0x72,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x3e,0x20,0x63,0x6f,0x63,0x54,0x65,0x78,0x41,0x72,0x72,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x29,0x3b,0x0a,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x63,0x6f,0x63,0x54,
    0x65,0x78,0x41,0x72,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x31,0x29,0x3b,0x0a,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x3e,0x20,0x64,0x6f,0x66,0x54,0x65,0x78,0x20,0x3a,0x20,0x72,0x65,
    0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x32,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x64,0x6f,0x66,0x54,0x65,0x78,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x73,0x32,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,
    0x79,0x65,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x30,0x20,0x3d,0x20,0x6d,
    0x61,0x69,0x6e,0x43,0x61,0x6d,0x65,0x72,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x2e,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x6d,0x61,0x69,0x6e,0x43,0x61,0x6d,0x65,0x72,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x31,0x35,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6c,0x65,0x72,0x70,
    0x28,0x5f,0x32,0x30,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x64,0x6f,0x66,0x54,0x65,0x78,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x64,0x6f,0x66,0x54,0x65,0x78,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,
    0x61,0x79,0x65,0x72,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x73,0x6d,0x6f,0x6f,0x74,
    0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,
    0x36,0x32,0x35,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x2c,0x20,0x61,0x62,0x73,0x28,
    0x63,0x6f,0x63,0x54,0x65,0x78,0x41,0x72,0x72,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x28,0x5f,0x63,0x6f,0x63,0x54,0x65,0x78,0x41,0x72,0x72,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x2c,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,
    0x29,0x2e,0x78,0x29,0x29,0x2e,0x78,0x78,0x78,0x29,0x2c,0x20,0x5f,0x32,0x30,0x2e,
    0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x76,0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x20,
    0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,
    0x57,0x69,0x74,0x68,0x4c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x00,
};
dof_bokeh_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_dof_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_bokeh_fs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        16, /* size */
        { /* uniforms */{"bokeh_uniforms",sg.Uniform_Type.FLOAT4,1},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"cameraColorWithCoc",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_bokeh_shader", /* label */
  0, /* _end_canary */
};
dof_coc_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_dof_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_coc_fs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        16, /* size */
        { /* uniforms */{"builtins",sg.Uniform_Type.FLOAT4,1},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        16, /* size */
        { /* uniforms */{"dof_uniforms",sg.Uniform_Type.FLOAT4,1},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"cameraDepth",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_coc_shader", /* label */
  0, /* _end_canary */
};
dof_combine_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_dof_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_dof_combine_fs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"mainCameraColor",sg.Image_Type.ARRAY},{"cocTexArr",sg.Image_Type.ARRAY},{"dofTex",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_combine_shader", /* label */
  0, /* _end_canary */
};
dof_postfilter_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_dof_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_dof_postfilter_fs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"colorArray",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_postfilter_shader", /* label */
  0, /* _end_canary */
};
dof_prefilter_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"pos","TEXCOORD",0},{"uv0","TEXCOORD",1},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_dof_vs_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_dof_prefilter_source_hlsl5_depthoffield[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"prefilterColor",sg.Image_Type.ARRAY},{"prefilterCoc",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "dof_prefilter_shader", /* label */
  0, /* _end_canary */
};
} // SOKOL_D3D11
// #if !defined(SOKOL_GFX_INCLUDED)
//  #error "Please include sokol_gfx.h before depthoffield.odin"
// #endif
dof_bokeh_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_bokeh_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}
dof_coc_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_coc_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}
dof_combine_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_combine_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}
dof_postfilter_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_postfilter_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}
dof_prefilter_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &dof_prefilter_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}

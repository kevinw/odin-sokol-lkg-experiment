package shader_meta;

import sg "sokol:sokol_gfx"
using import "../math"

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'sdf_text':
            Get shader desc: sdf_text_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_a_pos = 0
                    ATTR_vs_a_texcoord = 1
                    ATTR_vs_a_attribs = 2
                Uniform block 'sdf_vs_uniforms':
                    C struct: sdf_vs_uniforms_t
                    Bind slot: SLOT_sdf_vs_uniforms = 0
            Fragment shader: fs
                Uniform block 'sdf_fs_uniforms':
                    C struct: sdf_fs_uniforms_t
                    Bind slot: SLOT_sdf_fs_uniforms = 0
                Image 'font_atlas':
                    Type: sg.Image_Type.D2
                    Bind slot: SLOT_font_atlas = 0


    Shader descriptor structs:

        sg_shader sdf_text = sg_make_shader(sdf_text_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_a_pos] = { ... },
                    [ATTR_vs_a_texcoord] = { ... },
                    [ATTR_vs_a_attribs] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_font_atlas = 0;

    Bind slot and C-struct for uniform block 'sdf_vs_uniforms':

        sdf_vs_uniforms_t sdf_vs_uniforms = {
            .view_proj_array = ...;
            .model_matrix = ...;
            .texsize = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_sdf_vs_uniforms, &sdf_vs_uniforms, sizeof(sdf_vs_uniforms));

    Bind slot and C-struct for uniform block 'sdf_fs_uniforms':

        sdf_fs_uniforms_t sdf_fs_uniforms = {
            .color = ...;
            .debug = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_sdf_fs_uniforms, &sdf_fs_uniforms, sizeof(sdf_fs_uniforms));

*/
// #include <stdint.h>
// #include <stdbool.h>
//#if !defined(SOKOL_SHDC_ALIGN)
//  #if defined(_MSC_VER)
//    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
//  #else
//    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
//  #endif
//#endif
ATTR_vs_a_pos :: 0;
ATTR_vs_a_texcoord :: 1;
ATTR_vs_a_attribs :: 2;

/* @(private) _get_attr_slot :: proc(attr_type: Attr_Type) -> int {
// TODO!
    return 0;
} */
SLOT_font_atlas :: 0;
SLOT_sdf_vs_uniforms :: 0;
sdf_vs_uniforms :: struct #align 16 {
    view_proj_array: [45]Matrix4,
    model_matrix: Matrix4,
    texsize: Vector2,
};
SLOT_sdf_fs_uniforms :: 0;
sdf_fs_uniforms :: struct #align 16 {
    color: Vector4,
    debug: f32,
};
when SOKOL_D3D11 {
/*
    cbuffer sdf_vs_uniforms : register(b0)
    {
        row_major float4x4 _28_view_proj_array[45] : packoffset(c0);
        row_major float4x4 _28_model_matrix : packoffset(c180);
        float2 _28_texsize : packoffset(c184);
    };
    
    
    static float4 gl_Position;
    static int gl_InstanceID;
    static uint gl_Layer;
    static float4 a_pos;
    static float2 v_texcoord;
    static float2 a_texcoord;
    static float4 attrib;
    static float4 a_attribs;
    
    struct SPIRV_Cross_Input
    {
        float4 a_pos : TEXCOORD0;
        float2 a_texcoord : TEXCOORD1;
        float4 a_attribs : TEXCOORD2;
        uint gl_InstanceID : SV_InstanceID;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 v_texcoord : TEXCOORD0;
        float4 attrib : TEXCOORD1;
        float4 gl_Position : SV_Position;
        uint gl_Layer : SV_RenderTargetArrayIndex;
    };
    
    #line 23 ""
    void vert_main()
    {
    #line 23 ""
        gl_Layer = gl_InstanceID;
    #line 24 ""
        gl_Position = mul(a_pos, mul(_28_model_matrix, _28_view_proj_array[gl_Layer]));
    #line 25 ""
        v_texcoord = a_texcoord / _28_texsize;
    #line 26 ""
        attrib = a_attribs;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        gl_InstanceID = int(stage_input.gl_InstanceID);
        a_pos = stage_input.a_pos;
        a_texcoord = stage_input.a_texcoord;
        a_attribs = stage_input.a_attribs;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.gl_Layer = gl_Layer;
        stage_output.v_texcoord = v_texcoord;
        stage_output.attrib = attrib;
        return stage_output;
    }
*/

_vs_source_hlsl5_sdf_text := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x73,0x64,0x66,0x5f,0x76,0x73,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,
    0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x32,0x38,0x5f,0x76,0x69,0x65,0x77,0x5f,0x70,0x72,0x6f,0x6a,0x5f,0x61,0x72,
    0x72,0x61,0x79,0x5b,0x34,0x35,0x5d,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,
    0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x5f,0x32,0x38,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,0x72,0x69,
    0x78,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,
    0x31,0x38,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x5f,0x32,0x38,0x5f,0x74,0x65,0x78,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x38,0x34,0x29,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,
    0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,
    0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x74,0x74,0x72,0x69,0x62,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x5f,
    0x61,0x74,0x74,0x72,0x69,0x62,0x73,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x61,0x5f,0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x61,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x3a,
    0x20,0x53,0x56,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x74,
    0x74,0x72,0x69,0x62,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x52,
    0x65,0x6e,0x64,0x65,0x72,0x54,0x61,0x72,0x67,0x65,0x74,0x41,0x72,0x72,0x61,0x79,
    0x49,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x33,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x4c,0x61,0x79,
    0x65,0x72,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,
    0x49,0x44,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x34,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x75,0x6c,0x28,0x61,0x5f,0x70,0x6f,0x73,0x2c,0x20,0x6d,0x75,0x6c,
    0x28,0x5f,0x32,0x38,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,0x72,0x69,
    0x78,0x2c,0x20,0x5f,0x32,0x38,0x5f,0x76,0x69,0x65,0x77,0x5f,0x70,0x72,0x6f,0x6a,
    0x5f,0x61,0x72,0x72,0x61,0x79,0x5b,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x5d,
    0x29,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,
    0x20,0x61,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x2f,0x20,0x5f,0x32,
    0x38,0x5f,0x74,0x65,0x78,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x61,0x74,0x74,0x72,0x69,
    0x62,0x20,0x3d,0x20,0x61,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x73,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,
    0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x61,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x5f,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x61,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x67,0x6c,0x5f,0x4c,0x61,0x79,0x65,0x72,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x4c,
    0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x20,0x3d,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x61,0x74,0x74,0x72,0x69,0x62,0x20,0x3d,0x20,0x61,0x74,0x74,0x72,0x69,0x62,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer sdf_fs_uniforms : register(b0)
    {
        float4 _36_color : packoffset(c0);
        float _36_debug : packoffset(c1);
    };
    
    Texture2D<float4> font_atlas : register(t0);
    SamplerState _font_atlas_sampler : register(s0);
    
    static float2 v_texcoord;
    static float4 attrib;
    static float4 frag_color;
    
    struct SPIRV_Cross_Input
    {
        float2 v_texcoord : TEXCOORD0;
        float4 attrib : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    #line 17 ""
    void frag_main()
    {
    #line 17 ""
        float4 _20 = font_atlas.Sample(_font_atlas_sampler, v_texcoord);
        float _23 = _20.x;
    #line 18 ""
    #line 19 ""
    #line 21 ""
        if (_36_debug > 0.0f)
        {
            frag_color = float4(_23, _23, _23, 1.0f);
        }
        else
        {
    #line 25 ""
            frag_color = float4(_36_color.xyz, smoothstep(attrib.y - attrib.x, attrib.y + attrib.x, _23) * _36_color.w);
        }
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_texcoord = stage_input.v_texcoord;
        attrib = stage_input.attrib;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/

_fs_source_hlsl5_sdf_text := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x73,0x64,0x66,0x5f,0x66,0x73,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x5f,0x33,0x36,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x36,0x5f,0x64,0x65,
    0x62,0x75,0x67,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x31,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x66,0x6f,0x6e,0x74,
    0x5f,0x61,0x74,0x6c,0x61,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,
    0x61,0x74,0x65,0x20,0x5f,0x66,0x6f,0x6e,0x74,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x61,0x74,0x74,0x72,0x69,0x62,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x74,0x74,
    0x72,0x69,0x62,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,
    0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x37,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,
    0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,
    0x32,0x30,0x20,0x3d,0x20,0x66,0x6f,0x6e,0x74,0x5f,0x61,0x74,0x6c,0x61,0x73,0x2e,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x66,0x6f,0x6e,0x74,0x5f,0x61,0x74,0x6c,
    0x61,0x73,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x76,0x5f,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x33,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x78,0x3b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x38,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x39,0x20,0x22,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x31,
    0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x36,0x5f,
    0x64,0x65,0x62,0x75,0x67,0x20,0x3e,0x20,0x30,0x2e,0x30,0x66,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x5f,0x32,0x33,0x2c,0x20,0x5f,0x32,0x33,0x2c,0x20,0x5f,0x32,0x33,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x35,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x33,0x36,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x61,0x74,0x74,
    0x72,0x69,0x62,0x2e,0x79,0x20,0x2d,0x20,0x61,0x74,0x74,0x72,0x69,0x62,0x2e,0x78,
    0x2c,0x20,0x61,0x74,0x74,0x72,0x69,0x62,0x2e,0x79,0x20,0x2b,0x20,0x61,0x74,0x74,
    0x72,0x69,0x62,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x33,0x29,0x20,0x2a,0x20,0x5f,0x33,
    0x36,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x5f,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x74,0x74,0x72,0x69,
    0x62,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x61,0x74,0x74,0x72,0x69,0x62,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x00,
};
sdf_text_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"a_pos","TEXCOORD",0},{"a_texcoord","TEXCOORD",1},{"a_attribs","TEXCOORD",2},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_vs_source_hlsl5_sdf_text[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        2960, /* size */
        { /* uniforms */{"sdf_vs_uniforms",sg.Uniform_Type.FLOAT4,185},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_fs_source_hlsl5_sdf_text[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        32, /* size */
        { /* uniforms */{"sdf_fs_uniforms",sg.Uniform_Type.FLOAT4,2},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"font_atlas",sg.Image_Type.D2},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "sdf_text_shader", /* label */
  0, /* _end_canary */
};
} // SOKOL_D3D11
// #if !defined(SOKOL_GFX_INCLUDED)
//  #error "Please include sokol_gfx.h before sdf_text.odin"
// #endif
sdf_text_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &sdf_text_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}

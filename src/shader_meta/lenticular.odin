package shader_meta;

import sg "sokol:sokol_gfx"
using import "../math"

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'lenticular':
            Get shader desc: lenticular_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_vertPos_data = 0
            Fragment shader: fs
                Uniform block 'lkg_fs_uniforms':
                    C struct: lkg_fs_uniforms_t
                    Bind slot: SLOT_lkg_fs_uniforms = 0
                Image 'screenTex':
                    Type: sg.Image_Type.ARRAY
                    Bind slot: SLOT_screenTex = 0


    Shader descriptor structs:

        sg_shader lenticular = sg_make_shader(lenticular_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_vertPos_data] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_screenTex = 0;

    Bind slot and C-struct for uniform block 'lkg_fs_uniforms':

        lkg_fs_uniforms_t lkg_fs_uniforms = {
            .pitch = ...;
            .tilt = ...;
            .center = ...;
            .invView = ...;
            .subp = ...;
            .ri = ...;
            .bi = ...;
            .tile = ...;
            .viewPortion = ...;
            .aspect = ...;
            .debug = ...;
            .debugTile = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_lkg_fs_uniforms, &lkg_fs_uniforms, sizeof(lkg_fs_uniforms));

*/
// #include <stdint.h>
// #include <stdbool.h>
//#if !defined(SOKOL_SHDC_ALIGN)
//  #if defined(_MSC_VER)
//    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
//  #else
//    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
//  #endif
//#endif
ATTR_vs_vertPos_data :: 0;

/* @(private) _get_attr_slot :: proc(attr_type: Attr_Type) -> int {
// TODO!
    return 0;
} */
SLOT_screenTex :: 0;
SLOT_lkg_fs_uniforms :: 0;
lkg_fs_uniforms :: struct #align 16 {
    pitch: f32,
    tilt: f32,
    center: f32,
    invView: f32,
    subp: f32,
    ri: i32,
    bi: i32,
    _pad_28: [4]u8,
    tile: Vector4,
    viewPortion: Vector4,
    aspect: Vector4,
    debug: i32,
    debugTile: i32,
};
when SOKOL_D3D11 {
/*
    cbuffer lkg_fs_uniforms : register(b0)
    {
        float _27_pitch : packoffset(c0);
        float _27_tilt : packoffset(c0.y);
        float _27_center : packoffset(c0.z);
        float _27_invView : packoffset(c0.w);
        float _27_subp : packoffset(c1);
        int _27_ri : packoffset(c1.y);
        int _27_bi : packoffset(c1.z);
        float4 _27_tile : packoffset(c2);
        float4 _27_viewPortion : packoffset(c3);
        float4 _27_aspect : packoffset(c4);
        int _27_debug : packoffset(c5);
        int _27_debugTile : packoffset(c5.y);
    };
    
    Texture2DArray<float4> screenTex : register(t0);
    SamplerState _screenTex_sampler : register(s0);
    
    static float2 texCoords;
    static float4 fragColor;
    
    struct SPIRV_Cross_Input
    {
        float2 texCoords : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 fragColor : SV_Target0;
    };
    
    float mod(float x, float y)
    {
        return x - y * floor(x / y);
    }
    
    float2 mod(float2 x, float2 y)
    {
        return x - y * floor(x / y);
    }
    
    float3 mod(float3 x, float3 y)
    {
        return x - y * floor(x / y);
    }
    
    float4 mod(float4 x, float4 y)
    {
        return x - y * floor(x / y);
    }
    
    #line 52 ""
    float3 clip(float3 toclip)
    {
    #line 52 ""
        bool3 _61 = bool3(toclip.x < 0.0f.xxx.x, toclip.y < 0.0f.xxx.y, toclip.z < 0.0f.xxx.z);
    #line 53 ""
        float3 _65 = 1.0f.xxx - toclip;
        bool3 _67 = bool3(_65.x < 0.0f.xxx.x, _65.y < 0.0f.xxx.y, _65.z < 0.0f.xxx.z);
    #line 57 ""
        return toclip * float(!any(bool3(_61.x || _67.x, _61.y || _67.y, _61.z || _67.z))).xxx;
    }
    
    #line 34 ""
    float3 texArr(float3 uvz)
    {
    #line 34 ""
    #line 36 ""
        return float3(uvz.x, 1.0f - uvz.y, floor(uvz.z * _27_tile.z));
    }
    
    #line 62 ""
    void frag_main()
    {
    #line 62 ""
        float3 _109 = float3(texCoords, 0.0f) - 0.5f.xxx;
    #line 64 ""
        float _131 = clamp((step(_27_aspect.y, _27_aspect.x) * step(_27_aspect.z, 0.5f)) + (step(_27_aspect.x, _27_aspect.y) * step(0.5f, _27_aspect.z)), 0.0f, 1.0f);
        float _134 = _109.x;
        float _143 = 1.0f - _131;
        float3 _295 = _109;
        _295.x = (((_131 * _134) * _27_aspect.x) / _27_aspect.y) + (_143 * _134);
        float _151 = _109.y;
        float3 _299 = _295;
        _299.y = (_131 * _151) + (((_143 * _151) * _27_aspect.y) / _27_aspect.x);
        float3 param = _299 + 0.5f.xxx;
        float3 _325;
        _325 = clip(param);
        float4 rgb[3];
        float3 param_1;
        for (int _324 = 0; _324 < 3; )
        {
    #line 72 ""
            float _206 = (((texCoords.x + (float(_324) * _27_subp)) + (texCoords.y * _27_tilt)) * _27_pitch) - _27_center;
            float _215 = mod(_206 + ceil(abs(_206)), 1.0f);
    #line 74 ""
            float3 _309 = _325;
            _309.z = ((1.0f - _27_invView) * _215) + (_27_invView * (1.0f - _215));
            param_1 = _309;
            rgb[_324] = screenTex.Sample(_screenTex_sampler, texArr(param_1));
            _325 = _309;
            _324++;
            continue;
        }
    #line 82 ""
        fragColor = (float4(rgb[_27_ri].x, rgb[1].y, rgb[_27_bi].z, 1.0f) * float(1 - _27_debug)) + (screenTex.Sample(_screenTex_sampler, float3(texCoords.x, 1.0f - texCoords.y, float(_27_debugTile))) * float(_27_debug));
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        texCoords = stage_input.texCoords;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.fragColor = fragColor;
        return stage_output;
    }
*/

_fs_source_hlsl5_lenticular := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6c,0x6b,0x67,0x5f,0x66,0x73,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x37,0x5f,0x70,0x69,0x74,0x63,0x68,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x37,0x5f,0x74,0x69,0x6c,
    0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,
    0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x37,0x5f,0x63,0x65,0x6e,0x74,0x65,0x72,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x37,0x5f,0x69,0x6e,0x76,
    0x56,0x69,0x65,0x77,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x37,0x5f,0x73,0x75,0x62,0x70,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x5f,0x72,0x69,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,0x79,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x5f,0x62,0x69,0x20,
    0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,
    0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,
    0x32,0x37,0x5f,0x74,0x69,0x6c,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x37,0x5f,0x76,0x69,0x65,0x77,0x50,0x6f,0x72,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x32,0x37,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x5f,0x64,0x65,0x62,0x75,0x67,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x35,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x5f,0x64,
    0x65,0x62,0x75,0x67,0x54,0x69,0x6c,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x35,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x3c,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,
    0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,
    0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,
    0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,
    0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,
    0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,0x72,
    0x28,0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x78,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x6f,0x72,0x28,0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x79,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x78,0x20,0x2d,
    0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x78,0x20,0x2f,0x20,0x79,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6d,0x6f,0x64,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,
    0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x35,0x32,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x6c,
    0x69,0x70,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,
    0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x32,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x36,0x31,0x20,0x3d,0x20,
    0x62,0x6f,0x6f,0x6c,0x33,0x28,0x74,0x6f,0x63,0x6c,0x69,0x70,0x2e,0x78,0x20,0x3c,
    0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x78,0x2c,0x20,0x74,0x6f,0x63,
    0x6c,0x69,0x70,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,
    0x2e,0x79,0x2c,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x2e,0x7a,0x20,0x3c,0x20,0x30,
    0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x35,0x33,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x36,0x35,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,
    0x78,0x20,0x2d,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x62,0x6f,0x6f,0x6c,
    0x33,0x28,0x5f,0x36,0x35,0x2e,0x78,0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,
    0x78,0x78,0x2e,0x78,0x2c,0x20,0x5f,0x36,0x35,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,
    0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x79,0x2c,0x20,0x5f,0x36,0x35,0x2e,0x7a,0x20,
    0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x35,0x37,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x21,0x61,0x6e,0x79,0x28,0x62,0x6f,0x6f,0x6c,0x33,0x28,
    0x5f,0x36,0x31,0x2e,0x78,0x20,0x7c,0x7c,0x20,0x5f,0x36,0x37,0x2e,0x78,0x2c,0x20,
    0x5f,0x36,0x31,0x2e,0x79,0x20,0x7c,0x7c,0x20,0x5f,0x36,0x37,0x2e,0x79,0x2c,0x20,
    0x5f,0x36,0x31,0x2e,0x7a,0x20,0x7c,0x7c,0x20,0x5f,0x36,0x37,0x2e,0x7a,0x29,0x29,
    0x29,0x2e,0x78,0x78,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x33,0x34,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x74,0x65,0x78,
    0x41,0x72,0x72,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x7a,0x29,0x0a,
    0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x34,0x20,0x22,0x22,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x33,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x75,0x76,0x7a,0x2e,
    0x78,0x2c,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x75,0x76,0x7a,0x2e,0x79,0x2c,
    0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x75,0x76,0x7a,0x2e,0x7a,0x20,0x2a,0x20,0x5f,
    0x32,0x37,0x5f,0x74,0x69,0x6c,0x65,0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x32,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x36,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x31,0x30,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x2c,0x20,0x30,
    0x2e,0x30,0x66,0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x78,0x3b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x34,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x31,0x20,0x3d,0x20,0x63,0x6c,
    0x61,0x6d,0x70,0x28,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x32,0x37,0x5f,0x61,0x73,
    0x70,0x65,0x63,0x74,0x2e,0x79,0x2c,0x20,0x5f,0x32,0x37,0x5f,0x61,0x73,0x70,0x65,
    0x63,0x74,0x2e,0x78,0x29,0x20,0x2a,0x20,0x73,0x74,0x65,0x70,0x28,0x5f,0x32,0x37,
    0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x7a,0x2c,0x20,0x30,0x2e,0x35,0x66,0x29,
    0x29,0x20,0x2b,0x20,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x32,0x37,0x5f,0x61,0x73,
    0x70,0x65,0x63,0x74,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x37,0x5f,0x61,0x73,0x70,0x65,
    0x63,0x74,0x2e,0x79,0x29,0x20,0x2a,0x20,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x35,
    0x66,0x2c,0x20,0x5f,0x32,0x37,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x7a,0x29,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x34,0x20,0x3d,
    0x20,0x5f,0x31,0x30,0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x34,0x33,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,
    0x20,0x5f,0x31,0x33,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x32,0x39,0x35,0x20,0x3d,0x20,0x5f,0x31,0x30,0x39,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x5f,0x32,0x39,0x35,0x2e,0x78,0x20,0x3d,0x20,0x28,0x28,0x28,0x5f,
    0x31,0x33,0x31,0x20,0x2a,0x20,0x5f,0x31,0x33,0x34,0x29,0x20,0x2a,0x20,0x5f,0x32,
    0x37,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,
    0x37,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x79,0x29,0x20,0x2b,0x20,0x28,0x5f,
    0x31,0x34,0x33,0x20,0x2a,0x20,0x5f,0x31,0x33,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x31,0x20,0x3d,0x20,0x5f,0x31,
    0x30,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x32,0x39,0x39,0x20,0x3d,0x20,0x5f,0x32,0x39,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x32,0x39,0x39,0x2e,0x79,0x20,0x3d,0x20,0x28,0x5f,0x31,0x33,0x31,
    0x20,0x2a,0x20,0x5f,0x31,0x35,0x31,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x5f,0x31,
    0x34,0x33,0x20,0x2a,0x20,0x5f,0x31,0x35,0x31,0x29,0x20,0x2a,0x20,0x5f,0x32,0x37,
    0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x37,
    0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,
    0x32,0x39,0x39,0x20,0x2b,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x33,0x32,0x35,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x35,0x20,0x3d,0x20,0x63,0x6c,0x69,0x70,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x72,0x67,0x62,0x5b,0x33,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x5f,0x33,0x32,
    0x34,0x20,0x3d,0x20,0x30,0x3b,0x20,0x5f,0x33,0x32,0x34,0x20,0x3c,0x20,0x33,0x3b,
    0x20,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,
    0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x30,0x36,0x20,0x3d,0x20,0x28,0x28,0x28,0x74,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x73,0x2e,0x78,0x20,0x2b,0x20,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x5f,0x33,0x32,0x34,0x29,0x20,0x2a,0x20,0x5f,0x32,0x37,0x5f,0x73,0x75,
    0x62,0x70,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x73,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x32,0x37,0x5f,0x74,0x69,0x6c,0x74,0x29,0x29,
    0x20,0x2a,0x20,0x5f,0x32,0x37,0x5f,0x70,0x69,0x74,0x63,0x68,0x29,0x20,0x2d,0x20,
    0x5f,0x32,0x37,0x5f,0x63,0x65,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x31,0x35,0x20,0x3d,
    0x20,0x6d,0x6f,0x64,0x28,0x5f,0x32,0x30,0x36,0x20,0x2b,0x20,0x63,0x65,0x69,0x6c,
    0x28,0x61,0x62,0x73,0x28,0x5f,0x32,0x30,0x36,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x66,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x37,0x34,0x20,0x22,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,
    0x33,0x30,0x39,0x20,0x3d,0x20,0x5f,0x33,0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x33,0x30,0x39,0x2e,0x7a,0x20,0x3d,0x20,0x28,0x28,0x31,
    0x2e,0x30,0x66,0x20,0x2d,0x20,0x5f,0x32,0x37,0x5f,0x69,0x6e,0x76,0x56,0x69,0x65,
    0x77,0x29,0x20,0x2a,0x20,0x5f,0x32,0x31,0x35,0x29,0x20,0x2b,0x20,0x28,0x5f,0x32,
    0x37,0x5f,0x69,0x6e,0x76,0x56,0x69,0x65,0x77,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,
    0x66,0x20,0x2d,0x20,0x5f,0x32,0x31,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x33,
    0x30,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x67,0x62,0x5b,
    0x5f,0x33,0x32,0x34,0x5d,0x20,0x3d,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,
    0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,0x65,0x78,
    0x41,0x72,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x35,0x20,0x3d,0x20,0x5f,0x33,
    0x30,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x34,
    0x2b,0x2b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,
    0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x38,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x72,0x67,0x62,0x5b,0x5f,0x32,0x37,0x5f,0x72,0x69,0x5d,0x2e,0x78,0x2c,0x20,0x72,
    0x67,0x62,0x5b,0x31,0x5d,0x2e,0x79,0x2c,0x20,0x72,0x67,0x62,0x5b,0x5f,0x32,0x37,
    0x5f,0x62,0x69,0x5d,0x2e,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x31,0x20,0x2d,0x20,0x5f,0x32,0x37,0x5f,0x64,0x65,
    0x62,0x75,0x67,0x29,0x29,0x20,0x2b,0x20,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,
    0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x73,0x63,0x72,0x65,0x65,
    0x6e,0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x2e,0x78,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x73,0x2e,0x79,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x32,0x37,0x5f,
    0x64,0x65,0x62,0x75,0x67,0x54,0x69,0x6c,0x65,0x29,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x5f,0x32,0x37,0x5f,0x64,0x65,0x62,0x75,0x67,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    static float4 gl_Position;
    static float2 vertPos_data;
    static float2 texCoords;
    
    struct SPIRV_Cross_Input
    {
        float2 vertPos_data : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 texCoords : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 12 ""
    void vert_main()
    {
    #line 12 ""
        gl_Position = float4(vertPos_data, 0.0f, 1.0f);
        texCoords = (vertPos_data + 1.0f.xx) * 0.5f;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vertPos_data = stage_input.vertPos_data;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.texCoords = texCoords;
        return stage_output;
    }
*/

_vs_source_hlsl5_lenticular := [?]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,
    0x5f,0x64,0x61,0x74,0x61,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,0x64,
    0x61,0x74,0x61,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x2c,0x20,0x30,
    0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3d,0x20,0x28,0x76,0x65,0x72,
    0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x20,0x2b,0x20,0x31,0x2e,0x30,0x66,
    0x2e,0x78,0x78,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x66,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,
    0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,
    0x64,0x61,0x74,0x61,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x73,0x20,0x3d,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
lenticular_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"vertPos_data","TEXCOORD",0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_vs_source_hlsl5_lenticular[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_fs_source_hlsl5_lenticular[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        96, /* size */
        { /* uniforms */{"lkg_fs_uniforms",sg.Uniform_Type.FLOAT4,6},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"screenTex",sg.Image_Type.ARRAY},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "lenticular_shader", /* label */
  0, /* _end_canary */
};
} // SOKOL_D3D11
// #if !defined(SOKOL_GFX_INCLUDED)
//  #error "Please include sokol_gfx.h before lenticular.odin"
// #endif
lenticular_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &lenticular_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}

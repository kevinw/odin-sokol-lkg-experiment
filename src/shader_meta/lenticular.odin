package shader_meta;

import sg "sokol:sokol_gfx"
using import "../math"

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'lenticular':
            Get shader desc: lenticular_shader_desc()
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_vertPos_data = 0
            Fragment shader: fs
                Uniform block 'lkg_fs_uniforms':
                    C struct: lkg_fs_uniforms_t
                    Bind slot: SLOT_lkg_fs_uniforms = 0
                Image 'screenTex':
                    Type: sg.Image_Type.D2
                    Bind slot: SLOT_screenTex = 0


    Shader descriptor structs:

        sg_shader lenticular = sg_make_shader(lenticular_shader_desc());

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_vertPos_data] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_screenTex = 0;

    Bind slot and C-struct for uniform block 'lkg_fs_uniforms':

        lkg_fs_uniforms_t lkg_fs_uniforms = {
            .pitch = ...;
            .tilt = ...;
            .center = ...;
            .invView = ...;
            .subp = ...;
            .ri = ...;
            .bi = ...;
            .tile = ...;
            .viewPortion = ...;
            .aspect = ...;
            .debug = ...;
        };
        sg_apply_uniforms(sg.SHADERSTAGE_[VS|FS], SLOT_lkg_fs_uniforms, &lkg_fs_uniforms, sizeof(lkg_fs_uniforms));

*/
// #include <stdint.h>
// #include <stdbool.h>
//#if !defined(SOKOL_SHDC_ALIGN)
//  #if defined(_MSC_VER)
//    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
//  #else
//    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
//  #endif
//#endif
ATTR_vs_vertPos_data :: 0;

/* @(private) _get_attr_slot :: proc(attr_type: Attr_Type) -> int {
// TODO!
    return 0;
} */
SLOT_screenTex :: 0;
SLOT_lkg_fs_uniforms :: 0;
lkg_fs_uniforms :: struct #align 16 {
    pitch: f32,
    tilt: f32,
    center: f32,
    invView: f32,
    subp: f32,
    ri: i32,
    bi: i32,
    _pad_28: [4]u8,
    tile: [4]f32,
    viewPortion: [4]f32,
    aspect: [4]f32,
    debug: i32,
};
when SOKOL_D3D11 {
/*
    cbuffer lkg_fs_uniforms : register(b0)
    {
        float _29_pitch : packoffset(c0);
        float _29_tilt : packoffset(c0.y);
        float _29_center : packoffset(c0.z);
        float _29_invView : packoffset(c0.w);
        float _29_subp : packoffset(c1);
        int _29_ri : packoffset(c1.y);
        int _29_bi : packoffset(c1.z);
        float4 _29_tile : packoffset(c2);
        float4 _29_viewPortion : packoffset(c3);
        float4 _29_aspect : packoffset(c4);
        int _29_debug : packoffset(c5);
    };
    
    Texture2D<float4> screenTex : register(t0);
    SamplerState _screenTex_sampler : register(s0);
    
    static float2 texCoords;
    static float4 fragColor;
    
    struct SPIRV_Cross_Input
    {
        float2 texCoords : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 fragColor : SV_Target0;
    };
    
    float mod(float x, float y)
    {
        return x - y * floor(x / y);
    }
    
    float2 mod(float2 x, float2 y)
    {
        return x - y * floor(x / y);
    }
    
    float3 mod(float3 x, float3 y)
    {
        return x - y * floor(x / y);
    }
    
    float4 mod(float4 x, float4 y)
    {
        return x - y * floor(x / y);
    }
    
    #line 41 ""
    float3 clip(float3 toclip)
    {
    #line 41 ""
        bool3 _81 = bool3(toclip.x < 0.0f.xxx.x, toclip.y < 0.0f.xxx.y, toclip.z < 0.0f.xxx.z);
    #line 42 ""
        float3 _86 = 1.0f.xxx - toclip;
        bool3 _88 = bool3(_86.x < 0.0f.xxx.x, _86.y < 0.0f.xxx.y, _86.z < 0.0f.xxx.z);
    #line 46 ""
        return toclip * float(!any(bool3(_81.x || _88.x, _81.y || _88.y, _81.z || _88.z))).xxx;
    }
    
    #line 31 ""
    float2 texArr(float3 uvz)
    {
    #line 31 ""
        float _35 = floor(uvz.z * _29_tile.z);
        return float2((mod(_35, _29_tile.x) + uvz.x) / _29_tile.x, (floor(_35 / _29_tile.x) + uvz.y) / _29_tile.y) * _29_viewPortion.xy;
    }
    
    #line 51 ""
    void frag_main()
    {
    #line 51 ""
        float3 _129 = float3(texCoords, 0.0f) - 0.5f.xxx;
    #line 53 ""
        float _151 = clamp((step(_29_aspect.y, _29_aspect.x) * step(_29_aspect.z, 0.5f)) + (step(_29_aspect.x, _29_aspect.y) * step(0.5f, _29_aspect.z)), 0.0f, 1.0f);
        float _154 = _129.x;
        float _163 = 1.0f - _151;
        float3 _302 = _129;
        _302.x = (((_151 * _154) * _29_aspect.x) / _29_aspect.y) + (_163 * _154);
        float _171 = _129.y;
        float3 _306 = _302;
        _306.y = (_151 * _171) + (((_163 * _171) * _29_aspect.y) / _29_aspect.x);
        float3 param = _306 + 0.5f.xxx;
        float3 _326;
        _326 = clip(param);
        float4 rgb[3];
        float3 param_1;
        for (int _325 = 0; _325 < 3; )
        {
    #line 61 ""
            float _226 = (((texCoords.x + (float(_325) * _29_subp)) + (texCoords.y * _29_tilt)) * _29_pitch) - _29_center;
            float _235 = mod(_226 + ceil(abs(_226)), 1.0f);
    #line 63 ""
            float3 _316 = _326;
            _316.z = ((1.0f - _29_invView) * _235) + (_29_invView * (1.0f - _235));
            param_1 = _316;
            rgb[_325] = screenTex.Sample(_screenTex_sampler, texArr(param_1));
            _326 = _316;
            _325++;
            continue;
        }
    #line 66 ""
        fragColor = (float4(rgb[_29_ri].x, rgb[1].y, rgb[_29_bi].z, 1.0f) * float(1 - _29_debug)) + (screenTex.Sample(_screenTex_sampler, texCoords) * float(_29_debug));
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        texCoords = stage_input.texCoords;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.fragColor = fragColor;
        return stage_output;
    }
*/

_fs_source_hlsl5_lenticular := [?]u8 {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6c,0x6b,0x67,0x5f,0x66,0x73,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,0x70,0x69,0x74,0x63,0x68,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,0x74,0x69,0x6c,
    0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,
    0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x39,0x5f,0x63,0x65,0x6e,0x74,0x65,0x72,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,0x69,0x6e,0x76,
    0x56,0x69,0x65,0x77,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,0x73,0x75,0x62,0x70,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x5f,0x72,0x69,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,0x79,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x5f,0x62,0x69,0x20,
    0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,
    0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,
    0x32,0x39,0x5f,0x74,0x69,0x6c,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x39,0x5f,0x76,0x69,0x65,0x77,0x50,0x6f,0x72,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x5f,0x64,0x65,0x62,0x75,0x67,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x35,
    0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,
    0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,
    0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,
    0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,
    0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,
    0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,
    0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,
    0x72,0x28,0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x78,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,
    0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6d,0x6f,0x64,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x79,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x78,0x20,
    0x2d,0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x78,0x20,0x2f,0x20,
    0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6d,0x6f,
    0x64,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x78,0x20,0x2d,0x20,0x79,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x6f,0x72,
    0x28,0x78,0x20,0x2f,0x20,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x34,0x31,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,
    0x6c,0x69,0x70,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x74,0x6f,0x63,0x6c,0x69,
    0x70,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x38,0x31,0x20,0x3d,
    0x20,0x62,0x6f,0x6f,0x6c,0x33,0x28,0x74,0x6f,0x63,0x6c,0x69,0x70,0x2e,0x78,0x20,
    0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x78,0x2c,0x20,0x74,0x6f,
    0x63,0x6c,0x69,0x70,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,
    0x78,0x2e,0x79,0x2c,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x2e,0x7a,0x20,0x3c,0x20,
    0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x7a,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x34,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x5f,0x38,0x36,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x2e,0x78,
    0x78,0x78,0x20,0x2d,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x38,0x38,0x20,0x3d,0x20,0x62,0x6f,0x6f,
    0x6c,0x33,0x28,0x5f,0x38,0x36,0x2e,0x78,0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,
    0x78,0x78,0x78,0x2e,0x78,0x2c,0x20,0x5f,0x38,0x36,0x2e,0x79,0x20,0x3c,0x20,0x30,
    0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x79,0x2c,0x20,0x5f,0x38,0x36,0x2e,0x7a,
    0x20,0x3c,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x2e,0x7a,0x29,0x3b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x74,0x6f,0x63,0x6c,0x69,0x70,0x20,0x2a,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x21,0x61,0x6e,0x79,0x28,0x62,0x6f,0x6f,0x6c,0x33,
    0x28,0x5f,0x38,0x31,0x2e,0x78,0x20,0x7c,0x7c,0x20,0x5f,0x38,0x38,0x2e,0x78,0x2c,
    0x20,0x5f,0x38,0x31,0x2e,0x79,0x20,0x7c,0x7c,0x20,0x5f,0x38,0x38,0x2e,0x79,0x2c,
    0x20,0x5f,0x38,0x31,0x2e,0x7a,0x20,0x7c,0x7c,0x20,0x5f,0x38,0x38,0x2e,0x7a,0x29,
    0x29,0x29,0x2e,0x78,0x78,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x33,0x31,0x20,0x22,0x22,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,
    0x78,0x41,0x72,0x72,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x76,0x7a,0x29,
    0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x31,0x20,0x22,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x6f,0x72,0x28,0x75,0x76,0x7a,0x2e,0x7a,0x20,0x2a,0x20,0x5f,0x32,0x39,
    0x5f,0x74,0x69,0x6c,0x65,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x28,0x6d,0x6f,0x64,
    0x28,0x5f,0x33,0x35,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x74,0x69,0x6c,0x65,0x2e,0x78,
    0x29,0x20,0x2b,0x20,0x75,0x76,0x7a,0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x39,
    0x5f,0x74,0x69,0x6c,0x65,0x2e,0x78,0x2c,0x20,0x28,0x66,0x6c,0x6f,0x6f,0x72,0x28,
    0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,0x32,0x39,0x5f,0x74,0x69,0x6c,0x65,0x2e,0x78,
    0x29,0x20,0x2b,0x20,0x75,0x76,0x7a,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x39,
    0x5f,0x74,0x69,0x6c,0x65,0x2e,0x79,0x29,0x20,0x2a,0x20,0x5f,0x32,0x39,0x5f,0x76,
    0x69,0x65,0x77,0x50,0x6f,0x72,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x31,0x20,0x22,0x22,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x31,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x31,0x32,0x39,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x2c,
    0x20,0x30,0x2e,0x30,0x66,0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,
    0x78,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x33,0x20,0x22,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x31,0x20,0x3d,0x20,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x32,0x39,0x5f,
    0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x79,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x61,0x73,
    0x70,0x65,0x63,0x74,0x2e,0x78,0x29,0x20,0x2a,0x20,0x73,0x74,0x65,0x70,0x28,0x5f,
    0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x7a,0x2c,0x20,0x30,0x2e,0x35,
    0x66,0x29,0x29,0x20,0x2b,0x20,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x32,0x39,0x5f,
    0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x61,0x73,
    0x70,0x65,0x63,0x74,0x2e,0x79,0x29,0x20,0x2a,0x20,0x73,0x74,0x65,0x70,0x28,0x30,
    0x2e,0x35,0x66,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,
    0x7a,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x34,
    0x20,0x3d,0x20,0x5f,0x31,0x32,0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,
    0x20,0x2d,0x20,0x5f,0x31,0x35,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x5f,0x31,0x32,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x33,0x30,0x32,0x2e,0x78,0x20,0x3d,0x20,0x28,0x28,
    0x28,0x5f,0x31,0x35,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x78,0x29,0x20,0x2f,0x20,
    0x5f,0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x79,0x29,0x20,0x2b,0x20,
    0x28,0x5f,0x31,0x36,0x33,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x37,0x31,0x20,0x3d,0x20,
    0x5f,0x31,0x32,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x33,0x30,0x36,0x20,0x3d,0x20,0x5f,0x33,0x30,0x32,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x5f,0x33,0x30,0x36,0x2e,0x79,0x20,0x3d,0x20,0x28,0x5f,0x31,
    0x35,0x31,0x20,0x2a,0x20,0x5f,0x31,0x37,0x31,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,
    0x5f,0x31,0x36,0x33,0x20,0x2a,0x20,0x5f,0x31,0x37,0x31,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,
    0x32,0x39,0x5f,0x61,0x73,0x70,0x65,0x63,0x74,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x5f,0x33,0x30,0x36,0x20,0x2b,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x33,0x32,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,0x20,0x63,0x6c,
    0x69,0x70,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x67,0x62,0x5b,0x33,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x5f,
    0x33,0x32,0x35,0x20,0x3d,0x20,0x30,0x3b,0x20,0x5f,0x33,0x32,0x35,0x20,0x3c,0x20,
    0x33,0x3b,0x20,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x36,0x31,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x36,0x20,0x3d,0x20,0x28,0x28,0x28,0x74,
    0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x2e,0x78,0x20,0x2b,0x20,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x5f,0x33,0x32,0x35,0x29,0x20,0x2a,0x20,0x5f,0x32,0x39,0x5f,
    0x73,0x75,0x62,0x70,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x73,0x2e,0x79,0x20,0x2a,0x20,0x5f,0x32,0x39,0x5f,0x74,0x69,0x6c,0x74,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x32,0x39,0x5f,0x70,0x69,0x74,0x63,0x68,0x29,0x20,
    0x2d,0x20,0x5f,0x32,0x39,0x5f,0x63,0x65,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x33,0x35,
    0x20,0x3d,0x20,0x6d,0x6f,0x64,0x28,0x5f,0x32,0x32,0x36,0x20,0x2b,0x20,0x63,0x65,
    0x69,0x6c,0x28,0x61,0x62,0x73,0x28,0x5f,0x32,0x32,0x36,0x29,0x29,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x33,0x20,0x22,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x5f,0x33,0x31,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x31,0x36,0x2e,0x7a,0x20,0x3d,0x20,0x28,
    0x28,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x5f,0x32,0x39,0x5f,0x69,0x6e,0x76,0x56,
    0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x35,0x29,0x20,0x2b,0x20,0x28,
    0x5f,0x32,0x39,0x5f,0x69,0x6e,0x76,0x56,0x69,0x65,0x77,0x20,0x2a,0x20,0x28,0x31,
    0x2e,0x30,0x66,0x20,0x2d,0x20,0x5f,0x32,0x33,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x5f,0x33,0x31,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x67,
    0x62,0x5b,0x5f,0x33,0x32,0x35,0x5d,0x20,0x3d,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x54,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x73,0x63,0x72,0x65,
    0x65,0x6e,0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,
    0x65,0x78,0x41,0x72,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,0x20,
    0x5f,0x33,0x31,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,
    0x32,0x35,0x2b,0x2b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6e,0x74,0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x36,0x36,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x72,0x67,0x62,0x5b,0x5f,0x32,0x39,0x5f,0x72,0x69,0x5d,0x2e,0x78,0x2c,
    0x20,0x72,0x67,0x62,0x5b,0x31,0x5d,0x2e,0x79,0x2c,0x20,0x72,0x67,0x62,0x5b,0x5f,
    0x32,0x39,0x5f,0x62,0x69,0x5d,0x2e,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x31,0x20,0x2d,0x20,0x5f,0x32,0x39,0x5f,
    0x64,0x65,0x62,0x75,0x67,0x29,0x29,0x20,0x2b,0x20,0x28,0x73,0x63,0x72,0x65,0x65,
    0x6e,0x54,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x73,0x63,0x72,
    0x65,0x65,0x6e,0x54,0x65,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x5f,0x32,0x39,0x5f,0x64,0x65,0x62,0x75,0x67,0x29,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    static float4 gl_Position;
    static float2 vertPos_data;
    static float2 texCoords;
    
    struct SPIRV_Cross_Input
    {
        float2 vertPos_data : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 texCoords : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 12 ""
    void vert_main()
    {
    #line 12 ""
        gl_Position = float4(vertPos_data, 0.0f, 1.0f);
        texCoords = (vertPos_data + 1.0f.xx) * 0.5f;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vertPos_data = stage_input.vertPos_data;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.texCoords = texCoords;
        return stage_output;
    }
*/

_vs_source_hlsl5_lenticular := [?]u8 {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,
    0x5f,0x64,0x61,0x74,0x61,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,0x64,
    0x61,0x74,0x61,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x32,0x20,0x22,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x2c,0x20,0x30,
    0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x20,0x3d,0x20,0x28,0x76,0x65,0x72,
    0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x20,0x2b,0x20,0x31,0x2e,0x30,0x66,
    0x2e,0x78,0x78,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x66,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,
    0x74,0x50,0x6f,0x73,0x5f,0x64,0x61,0x74,0x61,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x50,0x6f,0x73,0x5f,
    0x64,0x61,0x74,0x61,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x73,0x20,0x3d,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
lenticular_shader_desc_hlsl5 := sg.Shader_Desc {
  0, /* _start_canary */
  { /*attrs*/{"vertPos_data","TEXCOORD",0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0},{nil,nil,0}, },
  { /* vs */
    cstring(&_vs_source_hlsl5_lenticular[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  { /* fs */
    cstring(&_fs_source_hlsl5_lenticular[0]), /* source */
    nil,  /* bytecode */
    0,  /* bytecode_size */
    "main", /* entry */
    { /* uniform blocks */
      {
        96, /* size */
        { /* uniforms */{"lkg_fs_uniforms",sg.Uniform_Type.FLOAT4,6},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
      {
        0, /* size */
        { /* uniforms */{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0},{nil,sg.Uniform_Type.INVALID,0}, },
      },
    },
    { /* images */ {"screenTex",sg.Image_Type.D2},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT},{nil,sg.Image_Type._DEFAULT}, },
  },
  "lenticular_shader", /* label */
  0, /* _end_canary */
};
} // SOKOL_D3D11
// #if !defined(SOKOL_GFX_INCLUDED)
//  #error "Please include sokol_gfx.h before lenticular.odin"
// #endif
lenticular_shader_desc :: proc() -> ^sg.Shader_Desc {
    when SOKOL_D3D11 {
    if sg.query_backend() == sg.Backend.D3D11 {
        return &lenticular_shader_desc_hlsl5;
    }
    } /* SOKOL_D3D11 */
    return nil; /* can't happen */
}

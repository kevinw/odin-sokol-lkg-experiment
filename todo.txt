(A) shader_meta needs a cleanup. at the very least, start with package-per-shader?
    or should we just go immediately for a more late-binding approach?
    ideally some mix of both is ideal...where to look for inspiration?
hdr pbr textures https://texturehaven.com/textures/
(B) prioritize this list by using a game idea as a forcing function
(B) shadow maps
@postfx depth of field - putting dof range negative makes fg objects blur. check the usage of it!
    unfinished fg/bg background stuff from https://catlikecoding.com/unity/tutorials/advanced-rendering/depth-of-field/
@postfx @editor gizmos showing DOF planes?
games with depth
    flying, walking, racing inwards
    crash bandicoot-style coming outwards
    battletoads wind tunnel style procgen'd infinite 
shader reloading - see https://github.com/ThisDrunkDane/libbrew/blob/6ecefb232bc5d8d1b71fad706fc0a857da156fb6/catalog/catalog.odin for an example of using ReadDirectoryChangesW in this context
wrap high level "c" procs in context setup wrapper functions for things like the assert handler
consider some kind of MainTex_TexelSize magic?
@graphics reflect a cubemap of the helmet, like https://github.com/DiligentGraphics/DiligentFX/tree/master/GLTF_PBR_Renderer
bloom/hdr/post processing/filmic aes?
check for same mu scissor rect before resetting draw
shader globals from an @annotation
@qualityOfLife sokol's asserts could trigger a stack trace
turn @annotations into shader globals like this:
    uniform my_debug_uniforms {
        int debug;
    };

    #define DEBUG_OFF 0
    #define DEBUG_DEPTH 1
    #define DEBUG_COLOR 2
    #define DEBUG_DOF 3
@editor scene view (both this and shadow maps require similar camera work)
make subview quilt size a multiple of the actual device width? this way, 8k would get a higher res by default...
asset catalog: shaders, configs, images
a set of "println" tools for the screen - temporary message, permanent message with corner
multiple window support with a scene view - essential for lkg development?
integrate sokol compute pull request
log system with info/debug/warn/error
cleanup input/keys array state
undo @editor
@editor consider a switch to imgui
remove c runtime dependency from dependencies?
@editor implement a rotation gizmo based on the trackball example here: http://www.songho.ca/opengl/gl_camera.html#example2
make it very easy to say "this value lerps to this other value"
iq's warp https://www.iquilezles.org/www/articles/warp/warp.htm?utm_source=share&utm_medium=ios_app&utm_name=iossmf
consider using D3DCOMPILE_OPTIMIZATION_LEVEL0 for debug mode in sokol-"Directs the compiler to use the lowest optimization level. If you set this constant, the compiler might produce slower code but produces the code more quickly. Set this constant when you develop the shader iteratively."
compile dependencies with all optimizations
project window for assets in project @editor

(C) @editor use relative mouse movement when dragging sliders (not needed w/ imgui?)
(C) animation skinning
(C) sketch out a flowchart for asset generation, research assimp vs other approaches
(C) @vim make 'float3' typo correct to 'vec3', etc, in glsl files

x render a framebuffer
x render a quilt
x render a complex mesh
x optimize sdf rendering buffer
x depth of field
